<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jiangxin&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/9d3fdbd6c9ddbfc1e23f003190a28e81</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://victorjiangxin.github.io/"/>
  <updated>2019-07-24T04:45:12.126Z</updated>
  <id>http://victorjiangxin.github.io/</id>
  
  <author>
    <name>JiangXin</name>
    <email>jaingxin.hust@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于SOOT框架的JAVA指针分析</title>
    <link href="http://victorjiangxin.github.io//CodeAnalyse/"/>
    <id>http://victorjiangxin.github.io//CodeAnalyse/</id>
    <published>2019-07-19T02:05:49.000Z</published>
    <updated>2019-07-24T04:45:12.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="https://github.com/VictorJiangXin/JAVA-Pointer-Analyse" target="_blank" rel="noopener">code</a><br>研一在国科大暑假小学期，选修了北大熊英飞和张路老师的《程序分析》，上课期间，很多时候都是云里雾里。课程结束后，留有一个大作业「实现一个JAVA上的指针分析系统」。花了几天时间，终于将其搞定，于是决定当一个“事后诸葛亮”，整理下大作业实现的思路，简单系统的讲述下如何完成这个系统。</p><p><strong>需求</strong>  </p><p>利用开源框架，如SOOT程序分析框架，对JAVA程序进行指针分析。  </p><p>输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Benchmark.alloc(<span class="number">1</span>); <span class="comment">//标记分配点</span></span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">Benchmark.alloc(<span class="number">2</span>);</span><br><span class="line">A b = <span class="keyword">new</span> A();</span><br><span class="line">Benchmark.alloc(<span class="number">3</span>);</span><br><span class="line">A c = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">if</span> (args.length&gt;<span class="number">1</span>) a=b;</span><br><span class="line">Benchmark.test(<span class="number">1</span>, a); <span class="comment">//标记测试点编号和被测变量</span></span><br><span class="line">Benchmark.test(<span class="number">2</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1: 1 2</span><br><span class="line">2: 3</span><br></pre></td></tr></table></figure><p>上述需求是这样理解的，<code>alloc(1)</code>表示一开始<code>new A()</code>得到的地址标号为1，同理得到b、c的地址标号。最后输入测试变量，得到<code>a</code>可能在的地址标号。以<code>a</code>分析举例，一开始，<code>A a = new A()</code>，可以确定<code>a</code>变量对应有地址1，然后在<code>if (args.length&gt;1) a=b;</code>语句之后，<code>a</code>还可能有地址2，然后，合并分支，可以得到<code>a</code>可能在的地址为1和2。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>刚开始接触到这个大作业，应该先根据理论知识，确定相应的几个核心问题，然后根据问题，我们逐步提出软件框架，最后设计出整个系统。首先，是核心问题的提出，我们需要思考的问题包括：</p><p><strong>1 指针分析中，半格应该是什么？程序怎样来表示半格？</strong><br><strong>2 JAVA程序中，存在哪几种操作，该操作会影响指针的指向？这些操作，对应的半格操作是什么？</strong><br><strong>3 对于域敏感的指针分析，如何处理域敏感？假设存在类A，其表示为：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">   B f;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>那么对于两个A变量<code>a</code>和<code>b</code>，赋值操作<code>a=b</code>，那么对于<code>a.f</code>以及<code>b.f</code>。它们是否是相同的。</strong><br><strong>4 程序中，存在条件选择函数，按照程序分析的假设，要认为每条支路都当做一条支路，如何实现分支，半格在其中如何变化，最后如何实现合并？</strong><br><strong>5 程序中，存在函数调用，也就是程序间程序分析，假设存在这样的调用：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fun1 () &#123;</span><br><span class="line">  <span class="keyword">int</span> a, b;</span><br><span class="line">  fun2(a, b);</span><br><span class="line">&#125;</span><br><span class="line">fun2 (<span class="keyword">int</span> c, <span class="keyword">int</span> d) &#123;</span><br><span class="line">  d = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>如何使得<code>fun1</code>中的<code>a</code>和<code>b</code>参数与<code>fun2</code>中的<code>d</code>和<code>c</code>对应起来。同时，每个函数域中存在很多的同名函数，则如何让他们不会相互影响？</strong></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><p>根据上述问题的分析，我们可以可以慢慢整理出一个框架，具体过程就不再赘叙，我就直接用另一个大佬实现的，我稍微修改的程序框架来进行说明。</p><h2 id="Variable类"><a href="#Variable类" class="headerlink" title="Variable类"></a>Variable类</h2><p>Variable类用于表示半格变量，它需要实现下述功能：</p><ol><li>对于程序中出现的每个变量，都应该有一个对应的Variable对象。</li><li>Variable中需要一个对象，用于存储半格变量，也就是地址标号。以及相应对地址标号的操作，如添加获取等。</li><li>在程序分析时，遇到分支，半格在不同分支会有不同的变化值，然后在分支汇合处进行合并操作。因此，需要为Variable类实现复制操作，在不同分支，都具备单独的半格变量。（因为如果只是=只是引用，并不是复制），注意Member变量的复制，浅复制只是引用！！</li><li>由于我们需要进行域敏感分析，因此需要保存每个对象相应的成员函数。因此，在每个Variable中，还应该具备成员变量，成员变量中包含了成员对应的Variable对象。</li><li>在JAVA中与指针相关的操作，实际上就是赋值操作，我们需要模拟该操作。</li></ol><p>因此，我们可以确定Variable类的简单框架：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</span><br><span class="line">  Local local; <span class="comment">//程序中对应的变量</span></span><br><span class="line">  Member member;</span><br><span class="line">  Set&lt;Integer&gt; sourceId;</span><br><span class="line"></span><br><span class="line">  <span class="function">Variable <span class="title">copy</span><span class="params">(<span class="keyword">boolean</span> depp)</span></span>; <span class="comment">// deep则对Member变量也进行复制，否则只是复制Member的引用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(Variable <span class="keyword">var</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addId</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">  <span class="function">Set&lt;Integer&gt; <span class="title">getSourceId</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Member类"><a href="#Member类" class="headerlink" title="Member类"></a>Member类</h2><p>Member类主要用于表示成员变量，用于存储成员变量与Variable对象的映射关系。因此它需要实现下面功能：</p><ol><li>具有一个映射表，能够根据成员变量描述，得到相应的Variable对象。</li><li>由于类包含有映射表，Variable需要实现复制，因此其也要实现复制操作。</li><li>添加映射关系等。</li></ol><p>因此，我们可以确定Member类的简单框架。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">  Value value;</span><br><span class="line">  Map&lt;SootFieldRef, Variable&gt; fieldMap;</span><br><span class="line"></span><br><span class="line">  <span class="function">Member <span class="title">copy</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Variable <span class="title">getVariable</span><span class="params">(SootFieldRef sfr)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addField</span><span class="params">(SootFieldRef sfr, Variable <span class="keyword">var</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Analyzer类"><a href="#Analyzer类" class="headerlink" title="Analyzer类"></a>Analyzer类</h2><p>Analyzer类主要实现指针分析的整体的半格操作。它需要实现下面功能：</p><ol><li>Analyzer系统中只能存在一个。</li><li>需要设置内存位置标号。</li><li>存在一个映射表，通过该表，我们可以找到所有变量对应的半格，也就是Variable对象，然后又因为存在不同分支，因此对于一些变量，其对应有多个半格。同时，需要对这个映射表进行简单的添、查操作。</li><li>需要记录查询的标号以及变量对应关系。</li><li>根据查询的标号以及变量对应关系，将对应变量的所有半格进行合并，得到最终结果。</li></ol><p>因此，我们可以确定Analyzer类的基本框架。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Analyzer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> allocId;</span><br><span class="line">  Map&lt;Local, Set&lt;Variable&gt;&gt; localMap;</span><br><span class="line">  Map&lt;Integer, Local&gt; queries;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setId</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addVar</span><span class="params">(Local local, Variable <span class="keyword">var</span>)</span></span>;</span><br><span class="line">  <span class="function">Set&lt;Variable&gt; <span class="title">getVars</span><span class="params">(Local local)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addQuery</span><span class="params">(<span class="keyword">int</span> id, Local local)</span></span>;</span><br><span class="line">  <span class="function">String <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Contex类"><a href="#Contex类" class="headerlink" title="Contex类"></a>Contex类</h2><p>在程序运行中，对于选择函数，则会产生分支，对于函数调用，则会进入一个新的运行区域，对于该区域，半格以及变量都会有所不同，因此，我们需要对该种行为进行一个抽象，因此我们抽象一个Contex对象，该对象模拟该种情况。因此该类需要实现下面功能：</p><ol><li>对于每个函数体内，具有独立的变量映射表。</li><li>对于函数调用，需要将调用函数体内的变量与当前函数的参数进行联系。注意，函数调用后，只会影响对象的内部对象的指针指向！！</li><li>对于程序中的分支（If等），其与主分支变量相同，但是需要复制一份，因为在不同分支中具备不同的半格变化表示。</li><li>需要判断是否进入递归函数或者分支循环。</li><li>注意点，创建分支区域与创建函数子区域是不同的。创建一个分支域!!!!需要复制半格，并且是deep复制，因为在分支内，对象及其内部成员都会受到影响。而创建函数子区域，则无需复制操作。在进行函数调用后，需要将参数与上层函数域内变量对应，简单的想，只要将上层对应变量的Variable与该层的Local对应就行了，这样在该域内，对该域的Local操作，然后相应进行半格操作。但是由于函数调用，不会改变对象本身的指针！！！！只能改变对象成员的指针，因此，我们此时与该域对应的参数的Local对应的应该是上层相应变量的Variable的浅复制，这样该域内可以改变对象的成员指针，但是不能改变对象本身指针，举例说明：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  B o;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    o = <span class="keyword">new</span> B();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPointerAnalysis</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(A a, A b)</span> </span>&#123;</span><br><span class="line">    a.o = b.o;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    A b = <span class="keyword">new</span> A();</span><br><span class="line">    System.out.println(<span class="string">"a: "</span> + a.hashCode() + <span class="string">" b: "</span> + b.hashCode());</span><br><span class="line">    System.out.println(<span class="string">"a.o: "</span> + a.o.hashCode() + <span class="string">" b.o: "</span> + b.o.hashCode());</span><br><span class="line">    swap(a, b);</span><br><span class="line">    System.out.println(<span class="string">"a: "</span> + a.hashCode() + <span class="string">" b: "</span> + b.hashCode());</span><br><span class="line">    System.out.println(<span class="string">"a.o: "</span> + a.o.hashCode() + <span class="string">" b.o: "</span> + b.o.hashCode());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序的输出结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a: 2018699554 b: 1311053135</span><br><span class="line">a.o: 118352462 b.o: 1550089733</span><br><span class="line">a: 2018699554 b: 1311053135</span><br><span class="line">a.o: 1550089733 b.o: 1550089733</span><br></pre></td></tr></table></figure></p><p>由此可见！<br>因此，我们可以确定Contex类的基本框架：：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contex</span> </span>&#123;</span><br><span class="line">  Analyzer analyzer;  <span class="comment">// 存在不同的半格分支，需要analyzer保存某个变量的所有半格</span></span><br><span class="line">  String methodSignature; <span class="comment">// 所在的函数体</span></span><br><span class="line">  Contex invokeMethod; <span class="comment">//保存该函数被调用所在的函数体的指正，从而能够将函数参数与上一个函数域对应</span></span><br><span class="line">  List&lt;Value&gt; args,</span><br><span class="line">  Contex preBranch; <span class="comment">// 用于保留分支前的支流指针，比如 存在分支 A-&gt; B, A -&gt; C，那么B,C对应的Contex保留的为A</span></span><br><span class="line">  Map&lt;Local, Variable&gt; localMap; <span class="comment">//在该域内，变量及其对饮的半格</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建一个函数调用的新域，</span></span><br><span class="line">  <span class="function">Contex <span class="title">createInvokeContex</span><span class="params">(String methodSignature, List&lt;Value&gt; args, Variable thisVar)</span>；</span></span><br><span class="line"><span class="function">  <span class="comment">//创建一个分支域!!!!需要复制半格，并且是deep复制，因为在分支内，对象及其内部成员都会受到影响</span></span></span><br><span class="line"><span class="function">  Contex <span class="title">createBranchScope</span><span class="params">(String branchSignature)</span>；</span></span><br><span class="line"><span class="function">  <span class="comment">// 将变量与半格对应</span></span></span><br><span class="line"><span class="function">  <span class="keyword">void</span> <span class="title">bindLocalAndVariable</span><span class="params">(Local local, Variable <span class="keyword">var</span>)</span></span>;</span><br><span class="line">  <span class="comment">// 简单来说就是将上层函数域中对应的变量的半格，浅复制一下，与当前域的local进行对应。</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bindArg</span><span class="params">(Local local, <span class="keyword">int</span> paramIndex)</span></span>;</span><br><span class="line">  <span class="comment">// 对于函数域内，变量的声明对应的Local，建立Variable与其对应</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bindThis</span><span class="params">(Local local)</span></span>;</span><br><span class="line">  <span class="comment">// 判断是否递归</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isInRecursion</span><span class="params">(String invokeSignature)</span></span>;</span><br><span class="line">  <span class="comment">// 判断分支是否递归</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isInBranchChain</span><span class="params">(String branchSignature)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="MyTransformer类"><a href="#MyTransformer类" class="headerlink" title="MyTransformer类"></a>MyTransformer类</h2><p>该类主要就是调用SOOT框架，SOOT框架将java文件以及class文件转化为相应的jimple文件，通过调用框架，针对各种情况进行分析，具体要看代码。因此可以得到该类的基本框架为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTransformer</span> <span class="keyword">extends</span> <span class="title">SceneTransformer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">internalTransform</span><span class="params">(String arg0, Map&lt;String, String&gt; arg1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">solveMethod</span><span class="params">(SootMethod method, Contex contex)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">solveBlock</span><span class="params">(Unit u, Contex contex, UnitGraph graph)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">solveUnit</span><span class="params">(Unit u, Contex contex)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="关于SOOT一些简单使用"><a href="#关于SOOT一些简单使用" class="headerlink" title="关于SOOT一些简单使用"></a>关于SOOT一些简单使用</h1><h2 id="如何调用soot框架"><a href="#如何调用soot框架" class="headerlink" title="如何调用soot框架"></a>如何调用soot框架</h2><p><strong>需要导入的包:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> soot.PackManager;</span><br><span class="line"><span class="keyword">import</span> soot.Transform;</span><br></pre></td></tr></table></figure></p><p><strong>启动使用soot进行程序分析</strong></p><ol><li>首先，你要创建一个继承<code>SceneTransformer</code>的类，并重写函数<code>protected void internalTransform(String s, Map&lt;String, String&gt; map)</code>来实现你自己在程序分析中的一些处理。</li><li><p>注册重写的<code>Transformer</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PackManager.v().getPack(<span class="string">"wjtp"</span>).add(<span class="keyword">new</span> Transform(<span class="string">"wjtp.myapp"</span>, <span class="keyword">new</span> MyTransformer()));</span><br></pre></td></tr></table></figure></li><li><p>在主函数中，启动soot函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">soot.Main.main(<span class="keyword">new</span> String[]&#123;</span><br><span class="line">                <span class="string">"-w"</span>,</span><br><span class="line">                <span class="string">"-f"</span>, <span class="string">"J"</span>,</span><br><span class="line">                <span class="string">"-p"</span>, <span class="string">"cg.spark"</span>, <span class="string">"enabled:true"</span>,</span><br><span class="line">                <span class="string">"-p"</span>, <span class="string">"wjtp.myapp"</span>, <span class="string">"enabled:true"</span>,</span><br><span class="line">                <span class="string">"-soot-class-path"</span>, &lt;包含运行时包含soot的jar包路径&gt;,</span><br><span class="line">                &lt;分析的代码的入口类，比如 App.Main&gt;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ol><p>** 通过分析图函数，来逐步分析每个节点</p><ol><li><p>导入包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> soot.*;</span><br><span class="line"><span class="keyword">import</span> soot.jimple.*;</span><br><span class="line"><span class="keyword">import</span> soot.toolkits.graph.BriefUnitGraph;</span><br><span class="line"><span class="keyword">import</span> soot.toolkits.graph.UnitGraph;</span><br></pre></td></tr></table></figure></li><li><p>开始依次执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取main函数</span></span><br><span class="line">SootMethod mainMethod = Scene.v().getMainMethod();</span><br><span class="line"><span class="comment">// 获取main函数的函数体</span></span><br><span class="line">Body body = mainMethod.getActiveBody();</span><br><span class="line"><span class="comment">// 基于函数体，创建程序分析图</span></span><br><span class="line">UnitGraph graph = <span class="keyword">new</span> BriefUnitGraph(body);</span><br><span class="line"><span class="comment">// 获取其头节点</span></span><br><span class="line">Unit head = graph.getHeads().iterator().next();</span><br><span class="line"><span class="comment">// 获取每个节点的后续节点</span></span><br><span class="line">List&lt;Unit&gt; succs = graph.getSuccsOf(head);</span><br><span class="line">List&lt;Unit&gt; succs = graph.getSuccsOf(u);</span><br></pre></td></tr></table></figure></li><li><p>一些语句实体的类型及相关操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">IdentityStmt is <span class="comment">//定义语句 exp: r0 := @this: test.FieldSensitivity</span></span><br><span class="line"><span class="comment">// 获取语句的两侧操作数或定义字符</span></span><br><span class="line">Value lop = is.getLeftOp()</span><br><span class="line">Value rop = is.getRightOp()</span><br><span class="line"></span><br><span class="line">ParameterRef pr <span class="comment">// 参数定义语句 如： benchmark.objects.A</span></span><br><span class="line">pr.getIndex()   <span class="comment">// 参数在函数调用中的位置</span></span><br><span class="line"></span><br><span class="line">ThisRef tr <span class="comment">// this定义 如： @this: benchmark.objects.B</span></span><br><span class="line"></span><br><span class="line">AssignStmt as <span class="comment">// 赋值语句，如： r4 = $r9</span></span><br><span class="line"></span><br><span class="line">AnyNewExpr ae <span class="comment">// new 语句，如： new benchmark.objects.B</span></span><br><span class="line">NewArrayExpr <span class="comment">// new 数组</span></span><br><span class="line"></span><br><span class="line">Local <span class="comment">// 局部变量，比如： $r3</span></span><br></pre></td></tr></table></figure></li><li><p>如果要对某个对象的内部值进行赋值或者操作，比如<code>A.name = B.name</code>，相关操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先获取FieldRef</span></span><br><span class="line">FieldRef fr<span class="comment">// 该类型用于表示表达式是否是存在域内部操作的，如： r3.&lt;benchmark.objects.A: benchmark.objects.B f&gt;</span></span><br><span class="line"><span class="comment">// 获取纯内部对象类型</span></span><br><span class="line">SootFieldRef sr = fr.getFieldRef() 如： &lt;benchmark.objects.A: benchmark.objects.B f&gt;</span><br><span class="line"><span class="comment">// 获取实际操作的操作</span></span><br><span class="line">Local rbase = (Local) fr.getBase(); 如 r3</span><br><span class="line"></span><br><span class="line">InstanceFieldRef <span class="comment">// 就是实例赋值 r3.&lt;benchmark.objects.A: benchmark.objects.B f&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>函数调用类的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InvokeStmt <span class="comment">// 函数调用的表达式，如： specialinvoke $r9.&lt;benchmark.objects.B: void &lt;init&gt;()&gt;()</span></span><br><span class="line">InvokeExpr ie <span class="comment">// 与上上式类似 如： specialinvoke $r9.&lt;benchmark.objects.B: void &lt;init&gt;()&gt;()</span></span><br><span class="line"></span><br><span class="line">SootMethod invokeMethod = ie.getMethod(); <span class="comment">// 获取调用的函数</span></span><br><span class="line">String methodSignature = invokeMethod.getSignature(); <span class="comment">//获取函数标签</span></span><br><span class="line">List&lt;Value&gt; invokeArgs = ie.getArgs(); <span class="comment">//获取参数</span></span><br><span class="line"></span><br><span class="line">InstanceInvokeExpr <span class="comment">// 实例初始化调用函数，如： specialinvoke r0.&lt;test.FieldSensitivity: void assign(benchmark.objects.A,benchmark.objects.A)&gt;(r2, r3)</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/VictorJiangXin/JAVA-Pointer-Analyse&quot; targe
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SOOT" scheme="http://victorjiangxin.github.io/tags/SOOT/"/>
    
      <category term="JAVA" scheme="http://victorjiangxin.github.io/tags/JAVA/"/>
    
      <category term="程序分析" scheme="http://victorjiangxin.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>go语言学习</title>
    <link href="http://victorjiangxin.github.io//golang-note/"/>
    <id>http://victorjiangxin.github.io//golang-note/</id>
    <published>2019-06-12T10:48:00.000Z</published>
    <updated>2019-06-12T12:18:11.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言优点"><a href="#Go语言优点" class="headerlink" title="Go语言优点"></a>Go语言优点</h1><ol><li>快速编译，高效执行，易于开发</li><li>对网络通信、并发和并行编程的极佳支持</li><li>Go 语言像其它静态语言一样执行本地代码，但它依旧运行在某种意义上的虚拟机，以此来实现高效快速的垃圾回收</li><li>能够轻松对第三方包进行部署，并且支持调用C语言编写的库</li></ol><p><strong>P.S:GO语言的实时性不高！C语言的实时性高</strong></p><h1 id="看懂GO代码-简单知识点"><a href="#看懂GO代码-简单知识点" class="headerlink" title="看懂GO代码-简单知识点"></a>看懂GO代码-简单知识点</h1><h2 id="函数启动点"><a href="#函数启动点" class="headerlink" title="函数启动点"></a>函数启动点</h2><p>一般会先执行<code>main.mian()</code>也就是<code>main</code>包中的<code>main</code>函数，如果文件中有<code>init()</code>函数，则会先执行<code>init()</code>函数。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>声明</strong>:<code>var name type</code></p><p><strong>GO可以自动推导类型</strong>: <code>var a = false</code></p><p><strong>局部变量</strong>： <code>a := 1</code></p><h2 id="函数形式"><a href="#函数形式" class="headerlink" title="函数形式"></a>函数形式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">(parameter_list)</span> <span class="params">(return_value_list)</span></span>&#123; </span><br><span class="line">&#125;</span><br><span class="line">parameter_list: (param1 type1, param2 type2, ...)</span><br><span class="line">return_value_list: (ret1 type1, ret2 type2)</span><br></pre></td></tr></table></figure><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li>基本类型：<code>int</code>、<code>float</code>、<code>bool</code>、<code>string</code></li><li>结构化类型：<code>struct</code>、<code>array</code>、<code>slice</code>、<code>map</code>、<code>channel</code></li><li>只描述类型行为：<code>interface</code></li></ul><p><strong>自定义类型</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type IZ int</span><br><span class="line">var a IZ = 5</span><br></pre></td></tr></table></figure><p><strong>这里并不是真正意义上的别名，因为使用这种方法定义之后的类型可以拥有更多的特性，且在类型转换时必须显式转换。</strong></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><strong>Go不支持隐式转换，只支持显式转换！</strong></p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v <span class="keyword">int</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123; <span class="comment">// initialization of package</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line">   Func1()</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">   fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">Method1</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Func1</span><span class="params">()</span></span> &#123; <span class="comment">// exported function Func1</span></span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://github.com/yangwenmai/learning-golang" target="_blank" rel="noopener">https://github.com/yangwenmai/learning-golang</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Go语言优点&quot;&gt;&lt;a href=&quot;#Go语言优点&quot; class=&quot;headerlink&quot; title=&quot;Go语言优点&quot;&gt;&lt;/a&gt;Go语言优点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;快速编译，高效执行，易于开发&lt;/li&gt;
&lt;li&gt;对网络通信、并发和并行编程的极佳支持&lt;/li&gt;

      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="go" scheme="http://victorjiangxin.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>基于Linear-CRF(线性条件随机场)的中文分词</title>
    <link href="http://victorjiangxin.github.io//Chinese-Word-Segmentation/"/>
    <id>http://victorjiangxin.github.io//Chinese-Word-Segmentation/</id>
    <published>2019-05-25T06:00:55.000Z</published>
    <updated>2019-07-24T04:43:37.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/VictorJiangXin/Linear-CRF/" target="_blank" rel="noopener">https://github.com/VictorJiangXin/Linear-CRF/</a></p><h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>研一下选修了宗成庆老师的「自然语言处理」，课程要求完成一系列的大作业，然而已是拖延症晚期的我，一直将其晾在一边，直到今天，才真正开始启动项目。由于实验室资源匮乏，没有GPU，因此只能选择使用传统方法能够完成的大作业，最终确定中文分词实验。</p><p>话不多说，先看前沿论文，看看当前中文分词的baseline。</p><p><img src="../img/Chinese-Word-Segmentation_0.png" alt=""></p><center>Bidirectional LSTM-CRF Models for Sequence Tagging, Kai Yu, 2015</center><p>由上图可知，2015年前，使用BI-LSTM+CRF模型，中文分词的效果最好，其相对准确度最高。但将其与传统的CRF方法比较，竟然只是<strong>个位数</strong>的提升！！！而且还要耗费巨大的计算量，使用GPU进行训练，这实在不是个划算的生意！总体而言，深度学习在自然语言处理方向的应用，对于机器翻译的提升最大，而其他比较传统的NLP任务，比如句法分析，实体标注等，使用传统的方法已经能够有非常好的效果了。因此，果断选择使用CRF(条件随机场)，来完成中文分词任务。</p><p>目前，已经有非常多的开源CRF包了，而且也非常好用，直接用这些包完成中文分词任务将会十分简单。但是，直接使用CRF包，就太没挑战性了，也不能够促进对知识点的理解，重点是——没有情怀！搞科研，最重要的是情怀，^_^，要有将知识转为实践的能力。因此，本次决定用Python实现一个简单的Linear-CRF模型（线性链条件随机场），用于完成中文分词任务，Let’s Go!</p><h1 id="CRF-条件随机场"><a href="#CRF-条件随机场" class="headerlink" title="CRF 条件随机场"></a>CRF 条件随机场</h1><p>要了解CRF，最好先了解下隐马尔科夫模型，可以先看看<a href="https://zhuanlan.zhihu.com/p/24322275" target="_blank" rel="noopener">隐马尔科夫模型在分词上的应用</a> ，先对HMM有个简答的了解，然后再理解CRF可以更容易些。</p><p>首先，什么是CRF(条件随机场)？如下图所示，白色的点表示为$Y$，黑色的点表示为$X$，设$X$与$Y$是随机变量，$P(Y|X)$是在给定$X$的条件下$Y$的条件概率分布，若随机变量$Y$构成了一个由无向图$G=(V,E)$表示的马尔可夫随机场，即：</p><script type="math/tex; mode=display">P(Y_v|X, Y_w, w\ne v)=P(Y_v|X,Y_w,w\sim v)</script><p>则称$P(Y|X)$为条件随机场。简而言之，就是随机变量$Y$所在的节点的随机变量，概率分布只与与其连接的节点有关。</p><p><img src="../img/Chinese-Word-Segmentation_1.png" alt=""></p><center>CRF结构图</center><h2 id="Linear-CRF-线性链条件随机场"><a href="#Linear-CRF-线性链条件随机场" class="headerlink" title="Linear CRF(线性链条件随机场)"></a>Linear CRF(线性链条件随机场)</h2><p>线性条件随机场是条件随机场的一种，其结构如上图的中间所示，随机变量$Y_t$的分布，除了给定的随机变量$X$外，只与其前后的随机变量$Y_{t-1}$以及$Y_{t+1}$有关。本次分词任务所用的即为线性条件随机场，后文所介绍皆以线性条件随机场为主，所称CRF也都指线性条件随机场，后文将不再赘述。</p><h2 id="线性链条件随机场的参数化形式"><a href="#线性链条件随机场的参数化形式" class="headerlink" title="线性链条件随机场的参数化形式"></a>线性链条件随机场的参数化形式</h2><p>设$P(Y|X)$为线性链条件随机场，则在随机变量$X$取值为$x$的条件下，随机变量$Y$取值为$y$的条件概率具有以下形式(上面所说的$x$，$y$均表示一个序列)：</p><script type="math/tex; mode=display">P(y|x)=\frac{1}{Z(x)} exp\left( \sum_{i,k}{\lambda_k t_k (y_{i-1}, y_i, x, i) + \sum_{i,l}{\mu_i s_l(y_i, x, i)}}\right)</script><p>其中，</p><script type="math/tex; mode=display">Z(x) = \sum_{y}{exp\left(\sum_{i,k}{\lambda_k t_k (y_{i-1}, y_i, x, i) + \sum_{i,l}{\mu_i s_l(y_i, x, i)}} \right)}</script><p>上式中，$t_k$和$s_l$为特征函数，$\lambda_k$和$s_l$代表的是对应的权值，$Z(x)$对应的是规范化因子。其中，特征函数一般随任务自由设定，其值一般为0或者1，而条件随机场需要训练的就是相关的权重值，比如$\lambda_k$与$s_l$。</p><h2 id="简单点，表达的方式简单点"><a href="#简单点，表达的方式简单点" class="headerlink" title="简单点，表达的方式简单点"></a>简单点，表达的方式简单点</h2><p>由于条件随机场在同一特征的各个位置中都有定义，可以对同一个特征在各个位置进行求和，将局部特征函数转化为一个全局特征函数，这样可以将条件随机场写成权值向量和特征向量的內积形式，即其简化表示，首先将转移特征与状态特征用统一的符号进行表示，设有$K_1$个转移特征，$K_2$个状态特征，$K=K_1+K_2$，记：</p><p><img src="../img/Chinese-Word-Segmentation_3.png" alt=""></p><p>同理，用$w_k$表示特征$f_k(y,x)$的权值，即：</p><p><img src="../img/Chinese-Word-Segmentation_4.png" alt=""></p><p>因此，条件随机场可表示为：</p><script type="math/tex; mode=display">P(y|x)=\frac{1}{Z(x)} exp \sum_{i=1}^n{\sum_{k=1}^K{w_kf_k(y_{i-1}, y_i, x, i)}}</script><script type="math/tex; mode=display">Z(x)=\sum_{y}exp \sum_{i=1}^n{\sum_{k=1}^K{w_kf_k(y_{i-1}, y_i, x, i)}}</script><p>我们常用矩阵去进行表示并进行相关计算，以$w$表示权重向量，即：</p><script type="math/tex; mode=display">W=(w_1,w_2,...,w_K)^T</script><p>而求得位置$i$对应的所有的特征表示为：</p><script type="math/tex; mode=display">F_i(x,y)=[f_1(i,x,y_i,y_{i-1}),f_2(i,x,y_i,y_{i-1}),...,f_K(i,x,y_i,y_{i-1})]^T\\</script><p>该等式表示的是位置$i$对应的相关特征，比如$F_1(x,y)=[1,0,0,0,1,0,0]$表示对于给定的$x$，$y$序列在序列的第一个位置，其具有相应的$f_1$特征，$f_5$特征。因此，此时条件随机场的计算可以表示为：</p><script type="math/tex; mode=display">P(y|x)=\frac{1}{Z(x)} exp(W^T.\sum_{i=1}^{n}{F_i(x,y)})</script><p>比如：</p><script type="math/tex; mode=display">X=(x_1,x_2)</script><script type="math/tex; mode=display">X=(x_1,x_2)</script><script type="math/tex; mode=display">Y=(Y_1,Y_2)</script><script type="math/tex; mode=display">W=(w_1,w_2,w_3,w_4)</script><p>为了计算$P(y|x)$，先计算各个位置对应的特征值，为:</p><script type="math/tex; mode=display">F_1=[1,0,0,1]</script><script type="math/tex; mode=display">F_2=[0,1,0,1]</script><script type="math/tex; mode=display">F=F_1+F_2=[1,1,0,2]</script><script type="math/tex; mode=display">P(y|x)=\frac{1}{Z(x)}exp((w_1,w_2,w_3,w_4).(1，1，0，2)^T)=\frac{1}{Z(x)}exp(w_1+w_2+2w_4)</script><p>同理，再去求$Z(x)$可以得到相关值，但$Z(x)$有其他计算方法，后面会再介绍。</p><p>只用公式太枯燥了，让我们举个栗子吧！以分词任务为例，$x$表示语句”今晚/月色/真/美”，而$y$采用常用的分词标注次，即为$y={B,E,I,S}$，其中$B$表示词语的开头，$E$表示词语的结尾，$I$表示词语的中间词，$S$表示单个词，则栗子中$y$对应的序列应该为$BEBESS$。而特征只举简单的栗子，只对单个词取特征，因此我们的特征对应为：</p><script type="math/tex; mode=display">s_1=s_1(y_i=B,x[i]='今')\ \lambda_1=1</script><script type="math/tex; mode=display">s_2=s_2(y_i=E,x[i]='今')\ \lambda_2=0.5</script><script type="math/tex; mode=display">s_3=s_3(y_i=S,x[i]='今')\ \lambda_3=0.2</script><script type="math/tex; mode=display">s_4=s_4(y_i=I,x[i]='今')\ \lambda_4=0.3</script><script type="math/tex; mode=display">s_5=s_5(y_i=B,x[i]='晚')\ \lambda_5=0.5</script><script type="math/tex; mode=display">s_6=s_6(y_i=E,x[i]='晚')\ \lambda_6=0.5</script><script type="math/tex; mode=display">s_7=s_7(y_i=S,x[i]='晚')\ \lambda_7=0.5</script><script type="math/tex; mode=display">s_8=s_8(y_i=I,x[i]='晚')\ \lambda_8=0.5</script><script type="math/tex; mode=display">...</script><script type="math/tex; mode=display">t_1=t_1(y_{i-1}=E,y_i=E)\ \mu_1=0.5</script><script type="math/tex; mode=display">t_2=t_2(y_{i-1}=B,y_i=E)\ \mu_2=0.5</script><script type="math/tex; mode=display">...</script><p>这些特征只有在满足条件时为1，否则为0。而右边的$\lambda$以及$\mu$是模型的参数，则对于此时，$P(y|x)$可表示为：</p><script type="math/tex; mode=display">P(y|x)=\frac{1}{Z(x)} exp(\lambda_1+\lambda_6+...)</script><p>上式值写了部分，其含义是，在第一个位置’今’，上面所列举的特征只有$f_1(y_1=B,x[1]=’今’)=1$，其余的特征对应为0，而第二个位置’晚’,上面所列举的特征只有$f_6(y_2=E,x[2]=’晚’)=1$。同理，可推导其他位置对应的特征，从而得到当前CRF模型下，对于给定$x$以及$y$对应的概率值。而$Z(x)$的要针对所有的$y$的可能进行累加，也就是类似语句”今晚/月色/真/美”对应的标记为$EEBESS$，$EEEESS$等等，所有的可能性，在当前CRF模型(给定特征权重参数情况下)，计算得到的概率的和。</p><h2 id="条件随机场的矩阵形式"><a href="#条件随机场的矩阵形式" class="headerlink" title="条件随机场的矩阵形式"></a>条件随机场的矩阵形式</h2><p>条件随机场可以由矩阵表示，假设$P_w(y|x)$是线性链条件随机场，表示给定观测序列$x$，相应的标记序列$y$的条件概率，引进特殊的起点和终点状态标记$y_0=start$，$y_{n+1}=end$，$y$可表示为$m$中形式即$y$的表示形式可以为$Y=(Y_1,Y_2,…,Y_m)$，则此时的$P_w(y|x)$可以通过矩阵形式表示。</p><p>对观测序列$x$的每一个位置$i=1,2,…,n+1$，定义一个$m$阶矩阵：</p><p><img src="../img/Chinese-Word-Segmentation_7.png" alt=""></p><p>因此，此时的条件概率$P(y|x)$可以表示为：</p><script type="math/tex; mode=display">P_w(y|x)=\frac{1}{Z(x)}\prod_{i=1}^{n+1}{M_i(y_{i-1},y_i,x)}</script><p>$Z(x)$规范化因子，则可表示为$(n+1)$个矩阵乘积中的元素：</p><script type="math/tex; mode=display">Z_w(x)=(M_1(x),M_2(x),...,(M_{n+1}(x)))_{[start][end]}</script><p> 为什么 $x$ 序列只有 $n$ 个元素，但是这里M矩阵有$n+1$个呢？因为，我们人为的添加了start与end。此时要注意，由于每个序列的start是确定的，因此，对于$M_1(x)$，只有$M_1(y_{0}=start, y_1)$ 不为零，其他的都为0。对于$M_{n+1}$只有$M_{n+1}(y_n, y_{n+1}=end)$ 为1， 其他都为0。</p><p>注意！！$M_i(x)$与$M_i(y_{i-1},y_i,x)$的区别，$M_i(x)$表示的是$m \times m$的矩阵，而$M_i(y_{i-1},y_i,x)$只是该矩阵中，$y_{i-1},y_i$为确定表示的一个元素。</p><p>举个栗子，给定一个线性链条件随机场，观测序列$x$，状态序列$y$，$i=1,2,3$，$ n=3$，标记$y_i={1,2}$ 假设$y_0=start=1$，$y_4=stop=1$，各个位置的随机矩阵分别为：</p><p><img src="../img/Chinese-Word-Segmentation_8.png" alt=""></p><p>从start到end对应的各个路径的非规范化概率分别是：</p><p><img src="../img/Chinese-Word-Segmentation_9.png" alt=""></p><p>而计算矩阵$M_1(x)M_2(x)M_3(x)M_4(x)$，其第一行第一列对应的元素为：</p><p><img src="../img/Chinese-Word-Segmentation_10.png" alt=""></p><h2 id="条件随机场的概率计算问题"><a href="#条件随机场的概率计算问题" class="headerlink" title="条件随机场的概率计算问题"></a>条件随机场的概率计算问题</h2><p><strong>前向向量</strong></p><p>对于每个位置$i=0,1,..,n+1$，定义前向向量$\alpha_i(x)_{m\times 1}$，其表示给定序列$x$，前$(i-1)$个位置的标签可以为任意的，但第 $i$ 个标签为 $y_i$ 的概率：</p><p><img src="../img/Chinese-Word-Segmentation_11.png" alt=""></p><script type="math/tex; mode=display">\alpha_i^T(y_i| x)=\sum_y{\alpha_{i-1}^T(y|x)M_i(y, y_i| x)}</script><p>也可表示成</p><p><img src="../img/Chinese-Word-Segmentation_14.png" alt=""></p><p>因此，$\alpha_0(x)$只有在start对应的标志处为1，其余为0。$\alpha_{n+1}(x)$ 只有在end对应的标志处存在值，其值为$z(x)$。</p><p><strong>后向向量</strong></p><p>对于每个位置$i=0,1,..,n+1$，定义前向向量$\beta_i(x)_{m\times 1}$，其表示给定序列$x$，第$i$个元素为$y_i$，从第$i$到$n$为任意的标签的概率：</p><p><img src="../img/Chinese-Word-Segmentation_12.png" alt=""></p><script type="math/tex; mode=display">\beta_i(y_i| x)=\sum_y{M_{i+1}(y_i, y| x)\beta_{i+1}(y|x)}</script><p>也可表示为：</p><p><img src="../img/Chinese-Word-Segmentation_15.png" alt=""></p><p>由前向向量以及后向向量可以得到：<script type="math/tex">Z(x)=\alpha_{n+1}^T(x).\bf1_{m\times 1}=\bf1_{m\times 1}^T.\beta_0(x)</script></p><p>因此，$\beta_{n+1}(x)$ 只有在end标志处为1，其余为0。$\beta_0(x)$ 只有在start标志处为$z(x)$，其余为0。</p><p><strong>概率计算</strong></p><p>与HMM模型一样，已知前向-后向向量的定义，很容易计算标记序列在位置$i$是标记$y_i$的条件概率，以及在位置$i-1$与$i$是标记$y_{i-1}$和$y_i$的条件概率：<script type="math/tex">P(y_i=Y_i|x)=\frac{\alpha_i^T(y_i=Y_i|x)\beta_i(y_i=Y_i|x)}{Z(x)}</script>，</p><script type="math/tex; mode=display">P(y_i=Y_i,y_{i-1}=Y_{i-1}|x)=\frac{\alpha_{i-1}^T(y_{i-1}=Y_{i-1}|x)M_i(y_{I-1}=Y_{i-1},y_i=Y_i|x)\beta_i(y_i=Y_i|x)}{Z(x)}</script><h2 id="条件随机场的预测问题"><a href="#条件随机场的预测问题" class="headerlink" title="条件随机场的预测问题"></a>条件随机场的预测问题</h2><p>与HMM的预测问题一样，条件随机场的预测问题也用Viterbi(维特比)算法，进行推测，其原理如下图所示。每次一次都更新每一位置对应的所有可能显示结果对应的可能性，然后选取最大的一个最为当前位置的路径。</p><p><img src="../img/Chinese-Word-Segmentation_2.png" alt=""></p><center>https://www.cnblogs.com/tornadomeet/archive/2012/03/24/2415889.html</center><p>因此相关算法可以描述为：</p><p>输入：模型特征向量$F(x,y)$和权值向量$W$，观测序列$x=(x_1,x_2,…,x_n)$。</p><p>输出：最优路径$y^*=(y_1^*,y_2^*,…,y_n^*)$</p><ol><li>初始化</li></ol><script type="math/tex; mode=display">\sigma_1(j)=W.F_1(y_0=start,y_1=j|x), j=1,2,..,m</script><ol><li>递推，对$i=1,2,3…,n$</li></ol><script type="math/tex; mode=display">\sigma_i(l)=\max_{1\leq j\leq m}{\sigma_{i-1}(j)+W.F_i(y_{i-1}=j,y_i=l,x)},l=1,2,…,m</script><script type="math/tex; mode=display">\psi_i(l)=\arg \max_{1\leq j\leq m}{\sigma_{i-1}(j)+W.F_i(y_{i-1}=j,y_i=l,x)},l=1,2,…,m</script><ol><li>终止</li></ol><script type="math/tex; mode=display">\max_y(W.F(y,x))=\max_{1\leq j\leq m}\sigma_n(j)</script><script type="math/tex; mode=display">y_n^\*=\arg \max_{1\leq j\leq m}\sigma_n(j)</script><ol><li>返回路径</li></ol><script type="math/tex; mode=display">y_i^\*=\psi_{i+1}(y_{i+1}^\*)，i=n-1,n-2,…,1</script><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>CRF训练是最重要的一点，主要用于训练得到CRF的权重矩阵，看了很多博客和李航的《统计学习方法》都写的很复杂，看完也不知道如何进行训练，最后还是在CRF的WIKI上，找到相关开源CRF的指导手册(万能的维基百科！)，终于找到了一种实用的用于训练的算法。它采用L-BFGS优化算法进行优化，在给定训练集$D=(X,Y)$的情况下，其对数似然为：</p><p><img src="../img/Chinese-Word-Segmentation_16.png" alt=""></p><p>对应于之前的公式，其实左边等式的和就是$\log P_w(y|x)$，具体看条件随机场的矩阵部分。</p><p>其相应的对数形式下，损失函数的梯度表示为：</p><p><img src="../img/Chinese-Word-Segmentation_17.png" alt=""></p><p>第一项就是预料中，对于该语料，每一特征出现的次数。第二项则是，对于某一个给定的$x$，先求出所有的$p(i, y_{i-1}, y_i)$，这个可以通过前向概率，后向概率计算得到，具体看前文。然后求出对应的$f_k(y_{i-1}, y_i)$，最后得到相应的值。相关伪代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feature_at</span><span class="params">(x, y_pre, y_now, k)</span>:</span></span><br><span class="line">  <span class="string">""" k is index of feature</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="keyword">if</span> xx:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(x)</span>:</span></span><br><span class="line">  gradient_item2 = np.zeros(weights.shape[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    <span class="keyword">for</span> y_pre <span class="keyword">in</span> range(ntags):</span><br><span class="line">      <span class="keyword">for</span> y_now <span class="keyword">in</span> range(ntags):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(weights.shape[<span class="number">0</span>]):</span><br><span class="line">          gradient_item2[k] += feature_at(x, y_pre, y_now, k) * P(i, y_pre, y_now)</span><br></pre></td></tr></table></figure><p>但是，在实际代码中，每次遍历一次特征是非常慢的，由于给定一个序列 $x$ ，其具有的特征是确定的，因此，可以直接找到对应的 $k$ 进行运算，具体看代码。</p><p>P.S CRF的训练，要求使得对数似然函数最大化！！！不是最小化，如果使用最小化策略去优化，一定要对他们取负。</p><h1 id="基于线性链条件随机场的中文分词"><a href="#基于线性链条件随机场的中文分词" class="headerlink" title="基于线性链条件随机场的中文分词"></a>基于线性链条件随机场的中文分词</h1><p>在理解完成上述CRF各个公式的含义及概念后，则问题就变得简单了，就是按照上述提供的公式，将其计算出来。</p><h2 id="中文分词特征是什么？"><a href="#中文分词特征是什么？" class="headerlink" title="中文分词特征是什么？"></a>中文分词特征是什么？</h2><p>条件随机场中特征一般分为两种，一种是U特征，也就是状态特征；另一种是B特征，也就是转移特征。U特征常常表示为(U, pos_shif, y,x,index, word)，其一般为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(U, <span class="number">-1</span>, y, x, index, word, tag):</span><br><span class="line">  <span class="keyword">if</span> (x[index+<span class="number">-1</span>] == word &amp;&amp; y[index] == tag):</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">(U, <span class="number">0</span>, y, x, index, word, tag):</span><br><span class="line">  <span class="keyword">if</span> (x[index+<span class="number">0</span>] == word &amp;&amp; y[index] == tag):</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>即该特征对应的是文字本身的前后文信息。</p><p>B特征常常表示为(B,tag_pre, tag_now)，其一般为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(B, tag_pre, tag_now)</span><br><span class="line"><span class="keyword">if</span>(y[index] == tag_now &amp;&amp; y[index<span class="number">-1</span>] == tag_pre):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>也就是说B特征表示的是变量y包含的状态转移信息。</p><p>而特征的数量为（$U_{count}\times V_{word}\times m+ m \times m$）。其中$U_{count}$表示U特征提取的位置数目，比如只提取文字前1个，当前文字，文字后一个，则此时$U_{count}=3$，$V_{word}$为语料库中文字数量，$m$表示$y$的标签数，即$y$的表现形式，对于每个文字，都有存在你一种表现形式的可能，因此要乘以m。B特征代表前一个标签到当前标签的转移概率。</p><h2 id="推测分词结果"><a href="#推测分词结果" class="headerlink" title="推测分词结果"></a>推测分词结果</h2><p>在训练好模型后，按照Viterbi算法，推到出最可能的y序列，则得到相应的分词结果。</p><h2 id="训练-1"><a href="#训练-1" class="headerlink" title="训练"></a>训练</h2><p>虽然我们已经知道了最大似然函数的表示以及梯度的计算公式，但是实际上，并不需要我们自己去写相关的优化器，直接使用传统的机器学习框架提供的<code>minimize</code>工具就行了，比如<code>scipy.optimize.minimize</code>。将相关的约束函数及对应导数作为参数输入，既可以得到相应的结果。</p><h2 id="Corpus-语料库"><a href="#Corpus-语料库" class="headerlink" title="Corpus(语料库)"></a>Corpus(语料库)</h2><p>北京大学语料库:<a href="https://pan.baidu.com/s/1gd6mslt" target="_blank" rel="noopener">https://pan.baidu.com/s/1gd6mslt</a></p><p>GitHub作者liwenzhu，于14年发布于GitHub，总词汇量在7400W+，可以用于训练。<a href="https://github.com/liwenzhu/corpusZh" target="_blank" rel="noopener">https://github.com/liwenzhu/corpusZh</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="http://flexcrfs.sourceforge.net/flexcrfs.pdf" target="_blank" rel="noopener">http://flexcrfs.sourceforge.net/flexcrfs.pdf</a> (flexcrfs是Python版本的开源包，该文档是其使用手册，本文引用了手册中的Train部分，即损失函数以及梯度计算。</li><li><a href="http://www.hankcs.com/ml/l-bfgs.html" target="_blank" rel="noopener">L-BFGS优化方法介绍</a></li><li><a href="https://people.cs.umass.edu/~mccallum/papers/crf-tutorial.pdf" target="_blank" rel="noopener">https://people.cs.umass.edu/~mccallum/papers/crf-tutorial.pdf</a></li><li>宗成庆-《自然语言处理》课件-2019年春-计算所</li><li>胡玥-《自然语言处理》课件-2018年秋-信工所</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/VictorJiangXin/Linear-CRF/&quot; target=&quot;_blank
      
    
    </summary>
    
      <category term="机器学习" scheme="http://victorjiangxin.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="NLP" scheme="http://victorjiangxin.github.io/tags/NLP/"/>
    
      <category term="中文分词" scheme="http://victorjiangxin.github.io/tags/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/"/>
    
      <category term="Linear CRF" scheme="http://victorjiangxin.github.io/tags/Linear-CRF/"/>
    
  </entry>
  
  <entry>
    <title>Python_note</title>
    <link href="http://victorjiangxin.github.io//Python-note/"/>
    <id>http://victorjiangxin.github.io//Python-note/</id>
    <published>2019-03-27T08:57:52.000Z</published>
    <updated>2019-05-24T12:03:54.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>在运行程序中，经常需要输入一系列的参数，用于指定文件夹之类的信息。常用的相关包有<code>import argparse</code>。下面是常用的用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parser = argparse.ArgumentParser(description=&apos;&apos;)</span><br><span class="line">parser.add_argument(&apos;--outf&apos;, default=&apos;./data/&apos;, help=&apos;folder to output images and model checkPoint&apos;)</span><br><span class="line">args = parser.parse_args()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h1&gt;&lt;p&gt;在运行程序中，经常需要输入一系列的参数，用于指定文件夹之类的信息。常用的相关包有&lt;code&gt;import argparse&lt;/code&gt;。下
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://victorjiangxin.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python3安装pymssql</title>
    <link href="http://victorjiangxin.github.io//python3-install-pymssql/"/>
    <id>http://victorjiangxin.github.io//python3-install-pymssql/</id>
    <published>2018-07-22T10:57:46.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提要"><a href="#提要" class="headerlink" title="提要"></a>提要</h1><p>由于在做项目中，需要通过python操作SQL Server数据库，在查看相关资料后，发现可以使用pymssql包，对数据库进行操作。本人使用的Python版本为3.5，查阅多种资料，都是推荐使用 <code>pip install pymssql</code> 但是，每次安装的时候，都出现错误，后来又尝试直接从pypi.org网站下载pymssql的包进行安装，进入相关包的路径后，输入<code>python setup.py install</code>但是仍旧是一堆错误。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在查看各种博客后，最终找到了解决方法。在微软的帖子里 <a href="https://docs.microsoft.com/en-us/sql/connect/python/pymssql/step-1-configure-development-environment-for-pymssql-python-development?view=sql-server-2017]" target="_blank" rel="noopener">微软的SQL帮助</a>核心原因是，pip安装的程序需要再专门的网站里下载，即要下载对应版本的数据。<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pymssql" target="_blank" rel="noopener">下载地址</a> 我是python3.5,64位，因此下载了 <code>pymssql‑2.1.4.dev5‑cp35‑cp35m‑win_amd64.whl</code> 然后进入下载的文件夹，运行指令 <code>pip install pymssql‑2.1.4.dev5‑cp35‑cp35m‑win_amd64.whl</code>从而成功安装。问题顺利解决 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;提要&quot;&gt;&lt;a href=&quot;#提要&quot; class=&quot;headerlink&quot; title=&quot;提要&quot;&gt;&lt;/a&gt;提要&lt;/h1&gt;&lt;p&gt;由于在做项目中，需要通过python操作SQL Server数据库，在查看相关资料后，发现可以使用pymssql包，对数据库进行操作。本人使
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://victorjiangxin.github.io/tags/python/"/>
    
      <category term="pymssql" scheme="http://victorjiangxin.github.io/tags/pymssql/"/>
    
  </entry>
  
  <entry>
    <title>通过geth Json-Rpc接口遇到的坑</title>
    <link href="http://victorjiangxin.github.io//etheStudy/"/>
    <id>http://victorjiangxin.github.io//etheStudy/</id>
    <published>2018-07-19T08:18:48.000Z</published>
    <updated>2019-05-24T12:10:41.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Python访问Geth遇到的问题"><a href="#使用Python访问Geth遇到的问题" class="headerlink" title="使用Python访问Geth遇到的问题"></a>使用Python访问Geth遇到的问题</h1><p>在使用python对Geth提供的Json-RPC服务器进行访问时，一直返回由于目标计算机积极拒接、无法连接的错误，因此作出以下尝试：</p><ol><li>使用python访问百度等官方网站，经测试，可以访问，说明当前配置无问题，问题出现在服务器端。</li><li>进入服务器，用netstat | grep 8545查看相关端口状态，发现端口一直处于Stopped状态。geth无法正常运行。经检测是磁盘空间不足，Geth数据无法同步，导致Geth运行失败，停止尝试。将.ethereum文件夹全部删除，重新运行geth —rpc，发现8545端口正常运行。</li><li>geth虽然端口正常运行，但是python仍旧无法去访问JsonRPC服务器。于是运行另一种geth命令。 geth —rpc —rpcaddr 10.21.41.1 —rpcport 8545。运行后，python能够从geth客户端获取信息问题解决。</li><li>问题原因，一开始访问 (ethereum JSONRPC的WIKI)[<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC]里面提供了两种运行命令：" target="_blank" rel="noopener">https://github.com/ethereum/wiki/wiki/JSON-RPC]里面提供了两种运行命令：</a><br><code>geth --rpc</code><br>该种默认rpcaddr是localhost.rpcport是8545。<br><code>geth --rpc --rpcaddr &lt;xx&gt; --rpcport &lt;port&gt;</code><br>该种情况是定义了IP和端口号，我以为localhost应该就是服务器的内网IP即 10.21.41.1但是，实际python访问是不行的，必须定义好rpcaddr，定义它为geth所在服务器的IP地址，从而才可以访问。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Python访问Geth遇到的问题&quot;&gt;&lt;a href=&quot;#使用Python访问Geth遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;使用Python访问Geth遇到的问题&quot;&gt;&lt;/a&gt;使用Python访问Geth遇到的问题&lt;/h1&gt;&lt;p&gt;在使
      
    
    </summary>
    
      <category term="区块链技术" scheme="http://victorjiangxin.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="以太坊" scheme="http://victorjiangxin.github.io/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="Geth" scheme="http://victorjiangxin.github.io/tags/Geth/"/>
    
      <category term="Json-RPC" scheme="http://victorjiangxin.github.io/tags/Json-RPC/"/>
    
  </entry>
  
  <entry>
    <title>HunterCatchRabbits</title>
    <link href="http://victorjiangxin.github.io//HunterCatchRabbits/"/>
    <id>http://victorjiangxin.github.io//HunterCatchRabbits/</id>
    <published>2018-07-18T02:00:22.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><pre><code>   假设卧底和特工有n个接头地点，编号为0和n-1。卧底每天晚上仅能换到相邻的接头地点，而特工每天白天在一个接头地点检查。   特工告诉你每天检查的接头地点的编号，希望你分析一下是否一定能与卧底碰头。</code></pre><h1 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h1><pre><code>   首先输入n和k（n&lt;100,k&lt;1000），分别表示接头地点的个数和特工检查的天数；接下来输入k个整数，表示特工每天检查的接头地点的编号。</code></pre><h1 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h1><pre><code>  如果一定能与卧底碰头，输出Yes，否则输出No。</code></pre><h1 id="测试用例："><a href="#测试用例：" class="headerlink" title="测试用例："></a>测试用例：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 6</span><br><span class="line">1 2 3 3 2 1</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码:"></a>测试代码:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">bool canCatchRibbit(vector&lt;int&gt; holeNums, vector&lt;int&gt; checked)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int k = holeNums.size();</span><br><span class="line">int n = checked.size();</span><br><span class="line">bool flag = true;</span><br><span class="line">int cnt = n;  //  cnt为兔子能待的洞的个数，初试化为所有洞的个数</span><br><span class="line">for (int i = 0; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line">int holeNum = holeNums[i] - 1; //  holeNum为洞的编号在vector中的序号，</span><br><span class="line">                               //  如：编号为1的洞在vector里面存的是0</span><br><span class="line">if (checked[holeNum] == 1)</span><br><span class="line">&#123;</span><br><span class="line">checked[holeNum] = 0;</span><br><span class="line">cnt--;</span><br><span class="line">&#125;</span><br><span class="line">if (cnt == 0)   //  如果兔子能待的洞的个数为0，则兔子肯定会被逮住</span><br><span class="line">&#123;</span><br><span class="line">flag = false;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">for (int j = 0; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">if (checked[j] == 1)</span><br><span class="line">&#123;</span><br><span class="line">checked[j] = 0;</span><br><span class="line">cnt--;</span><br><span class="line">if (j&gt;0 &amp;&amp; checked[j - 1] == 0)</span><br><span class="line">&#123;</span><br><span class="line">checked[j - 1] = 1;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">if (j &lt; n - 1 &amp;&amp; checked[j + 1] == 0)</span><br><span class="line">&#123;</span><br><span class="line">checked[j + 1] = 1;</span><br><span class="line">cnt++;</span><br><span class="line">j++;  //原来值为0的洞现在为1后是不能往相邻的洞跳，故继续检查下一个洞</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return flag;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n, k;  //  n为洞的个数，k为检查的天数</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">vector &lt;int&gt; holeNums(k, 0);  //  holeNums为每天检查的洞的编号</span><br><span class="line">for (auto &amp;m : holeNums)</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">vector&lt;int&gt; checked(n, 1);  //  checked为每天检查的洞中是否有兔子,可能有兔子则值为1，</span><br><span class="line">                            //  一定没兔子则值为0，全部初始化为1；</span><br><span class="line">bool flag = canCatchRibbit(holeNums, checked);</span><br><span class="line">if (!flag)</span><br><span class="line">cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;</span><br><span class="line">else</span><br><span class="line">cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;   假设卧底和特工有n个接头地点，编号为0和n-1。卧底每天晚上仅能换到相邻的接头地点，而特工每天
      
    
    </summary>
    
    
      <category term="算法" scheme="http://victorjiangxin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>linux文件编程</title>
    <link href="http://victorjiangxin.github.io//linux%E6%96%87%E4%BB%B6%E7%BC%96%E7%A8%8B/"/>
    <id>http://victorjiangxin.github.io//linux文件编程/</id>
    <published>2018-04-25T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Linux系统讲所有设备都当作文件来处理，因此Linux文件编程极其重要！<br>linux文件编程设计到文件的读、写定位等各种操作。其中对文件的操作都只能由内核态完成，用户态想要访问文件只能通过系统调用。<br>Linux文件编程中，最重要的一个概念便是文件描述符fd，所有文件的操作都通过文件描述符进行，每个文件对应一个文件描述符。<br>打开现存文件或新建文件时，内核会返回一个文件描述符，读写文件也需要使用文件描述符。  </p><h1 id="需要添加的函数库"><a href="#需要添加的函数库" class="headerlink" title="需要添加的函数库"></a>需要添加的函数库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;fcntl.h&gt;//文件控制选项头文件</span><br><span class="line">#include &lt;unistd.h&gt; //针对系统调用封装</span><br><span class="line">#include &lt;sys/type.h&gt;</span><br></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="open-打开文件"><a href="#open-打开文件" class="headerlink" title="open 打开文件"></a>open 打开文件</h2><p>函数原型： <code>int open(char *name, int how)</code><br>功能： 打开一个文件</p><ul><li>name: 文件名</li><li>how: 文件操作限制<ul><li>O_RDONLY 只读</li><li>O_WRONLY 只写</li><li>O_RDWR 读写  </li></ul></li><li>return <ul><li>-1: 打开失败</li><li>非零: 对应的文件描述符  </li></ul></li></ul><h2 id="create-创建文件"><a href="#create-创建文件" class="headerlink" title="create 创建文件"></a>create 创建文件</h2><p>函数原型： <code>int fd = create(char *filename, mode_t mode)</code><br>功能： 创建一个文件，如果源文件存在，则讲该文件清空</p><ul><li>filename： 文件名</li><li>mode: 访问模式<ul><li>COPYMODE</li></ul></li><li>return<ul><li>-1: 打开失败</li><li>非零: 成功创建</li></ul></li></ul><h2 id="read-读数据"><a href="#read-读数据" class="headerlink" title="read 读数据"></a>read 读数据</h2><p>函数原型: <code>ssize_t read(int fd, void *buf, size_t qty)</code><br>功能： 读取qty长度的数据到缓存buf中</p><ul><li>fd: 所读文件的文件描述符</li><li>buf: 缓存</li><li>qty: 读取文件的长度</li><li>return:<ul><li>-1: 读取错误</li><li>非零: 读取的长度</li></ul></li></ul><h2 id="write-写数据"><a href="#write-写数据" class="headerlink" title="write 写数据"></a>write 写数据</h2><p>函数原型： <code>ssize_t write(int fd, void *buf, size_t amt)</code><br>功能： 将buf中数据写入文件中</p><ul><li>fd: 所写文件的文件描述符</li><li>buf: 缓存</li><li>amt: 写进文件的长度</li><li>return:<ul><li>-1: 读取错误</li><li>非零: 写入的长度</li></ul></li></ul><h2 id="lseek-定位文件指针"><a href="#lseek-定位文件指针" class="headerlink" title="lseek 定位文件指针"></a>lseek 定位文件指针</h2><p>函数原型： <code>off_t lseek(int fd, off_t dist, int base)</code><br>功能： 将文件指针定位到制定位置</p><ul><li>fd: 操作的文件描述符</li><li>dist: 相对基位置的偏移量</li><li>base: 基位置<ul><li>SEEK_SET 文件的开始</li><li>SEEK_CUR 当前位置</li><li>SEEK_END 文件结尾</li></ul></li><li>return<ul><li>-1: 错误</li><li>其他： 指针变化前的位置</li></ul></li></ul><h2 id="close-关闭文件"><a href="#close-关闭文件" class="headerlink" title="close 关闭文件"></a>close 关闭文件</h2><p>函数原型： <code>int close(int fd)</code><br>功能： 关闭文件</p><ul><li>fd: 需要关闭的文件</li><li>return<ul><li>-1: 错误</li><li>0: 关闭正确</li></ul></li></ul><h1 id="处理系统调用中的错误"><a href="#处理系统调用中的错误" class="headerlink" title="处理系统调用中的错误"></a>处理系统调用中的错误</h1><h2 id="errno"><a href="#errno" class="headerlink" title="errno"></a>errno</h2><p>内核通过全局变量来指定系统调用的类型，每个程序可以访问到该变量。一般不用它判断系统调用错误。</p><h2 id="perror"><a href="#perror" class="headerlink" title="perror"></a>perror</h2><p>使用 <code>perror(string)</code><br>系统会自己查找调用错误的类型，并且将错误信息打印。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Linux系统讲所有设备都当作文件来处理，因此Linux文件编程极其重要！&lt;br&gt;linux文件编程设计到文件的读、写定位等各种操作。其中对
      
    
    </summary>
    
      <category term="linux学习" scheme="http://victorjiangxin.github.io/categories/linux%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="http://victorjiangxin.github.io/tags/linux/"/>
    
      <category term="文件操作" scheme="http://victorjiangxin.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>linux获取时间及Socket编程</title>
    <link href="http://victorjiangxin.github.io//linux%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E5%8F%8ASocket%E7%BC%96%E7%A8%8B/"/>
    <id>http://victorjiangxin.github.io//linux获取时间及Socket编程/</id>
    <published>2018-04-21T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何获取时间"><a href="#如何获取时间" class="headerlink" title="如何获取时间"></a>如何获取时间</h1><p>UNIX时间戳：从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。<br>UTC时间：世界协调时。以地球自转为基础的时间标准。 UTC表示方式为 年月日时分秒。</p><h2 id="获取UNIX时间戳"><a href="#获取UNIX时间戳" class="headerlink" title="获取UNIX时间戳"></a>获取UNIX时间戳</h2><p>C运行库：<code>#include &lt;sys/time.h&gt;</code><br>运行环境： C语言运行环境<br>函数： <code>gettimeofday(struct timeval* tv, struct timezone* tz)</code><br>功能： 获取当前UNIX时间戳<br>相关结构体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct timeval&#123;</span><br><span class="line">long tv_sec;//seconds</span><br><span class="line">long tv_usec;//microSeconds</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct timezone&#123;</span><br><span class="line">int tz_minuteswest;//diff of greenwich</span><br><span class="line">int tz_dsttime;//type of DST correction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="获取UTC时间"><a href="#获取UTC时间" class="headerlink" title="获取UTC时间"></a>获取UTC时间</h2><p>C运行库：<code>#include &lt;time.h&gt;</code><br>运行环境： C语言运行环境<br>函数1： <code>char *ctime(const time_t *timer)</code><br>功能1： 将UNIX时间戳转化成   Www Mmm dd hh:mm:ss yyyy (Mon Aug 13 08:23:14 2012)形式<br>函数2： <code>struct tm *gmtime(time_t *timer)</code><br>功能2： 将UNIX时间转化成struct tm结构。<br>相关结构体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct tm&#123;</span><br><span class="line">int tm_sec;</span><br><span class="line">int tm_min;</span><br><span class="line">int tm_hour;</span><br><span class="line">int tm_mday;</span><br><span class="line">int tm_mon;</span><br><span class="line">int tm_year;</span><br><span class="line">int tm_wday;</span><br><span class="line">int tm_yday;</span><br><span class="line">int tm_isdst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意： UTC时间年是以1900为参考点，记时间时需要year+1900， 时区是0时区，如果按照北京时间（东8区）需要tm_hour+8  </p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line"></span><br><span class="line">struct tm *GetBeijingTime();</span><br><span class="line">int main()&#123;</span><br><span class="line">struct tm *beijingTime;</span><br><span class="line">beijingTime = GetBeijingTime();</span><br><span class="line">printf(&quot;%d/%d/%d %2.2d:%2.2d:%2.2d\n&quot;, beijingTime-&gt;tm_year,</span><br><span class="line">beijingTime-&gt;tm_mon, beijingTime-&gt;tm_mday, beijingTime-&gt;tm_hour,</span><br><span class="line">beijingTime-&gt;tm_min, beijingTime-&gt;tm_sec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct tm *GetBeijingTime()&#123;</span><br><span class="line">struct timeval tv;</span><br><span class="line">struct tm *BeijingTime;</span><br><span class="line">gettimeofday(&amp;tv, NULL);</span><br><span class="line">BeijingTime = gmtime((time_t*)&amp;(tv.tv_sec));</span><br><span class="line">BeijingTime-&gt;tm_year += 1900;</span><br><span class="line">BeijingTime-&gt;tm_hour += 8;</span><br><span class="line">BeijingTime-&gt;tm_mon += 1;</span><br><span class="line">return BeijingTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><p>包含的库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br></pre></td></tr></table></figure></p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><ul><li>创建socket <code>int socket(int domain, int type, int protocol)</code><ul><li>domain: 协议域，决定了socket的地址类型。<ul><li>AF_INET: 用于IPV4网络通信</li><li>AF_UNIX: 单一Unix系统中进程间通信</li><li>AF_INET6: 用于IPV6网络通信</li></ul></li><li>type: 制定socket类型。<ul><li>SOCK_STREAM: 流式，一般用于TCP通信</li><li>SOCK_DGRAM: 数据包式，一般用于UDP通信</li></ul></li><li>protocaol: 制定协议。 IPPROTO_TCP表示TCP协议，IPPROTO_UDP表示UDP协议，为0时自动选择type默认协议</li><li>return: -1 错误； 非负值 成功</li></ul></li><li><p>绑定socket和端口号 <code>int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)</code></p><ul><li>sockfd: socket返回的套间字描述符，类似于文件描述符。</li><li><p>addr: 有个sockaddr类型数据的指针，指向的时被绑定结构变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//IPV4的sockaddr地址结构</span><br><span class="line">struct sockaddr_in&#123;</span><br><span class="line">sa_family sin_family;//协议类型，AF_INET</span><br><span class="line">in_port_t sin_port;//端口号</span><br><span class="line">struct in_addr sin_addr;//ip地址</span><br><span class="line">&#125;;</span><br><span class="line">struct in_addr&#123;</span><br><span class="line">uint32_t s_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//有关于sockaddr的相关函数</span><br><span class="line">htons() 将整形类型转换成网络字节序 比如 htons(INADDR_ANY),让系统自动获取本地IP地址</span><br><span class="line">htonl() 将长整形转换为网络字节序</span><br><span class="line">inet_pton(int af, char *str, pvoid addrbuf) 将点分十进制IP地址转换成网络字节</span><br><span class="line">af: 协议域，与socket的domain一致</span><br><span class="line">str: 要转换的地址 127.0.0.1</span><br><span class="line">addrbuf: sinaddr的指针</span><br><span class="line">inet_ntop(int af, pvoid addrbuf, char *str, size_t len) 将网络字节序转换成分十进制IO地址</span><br><span class="line">af: 协议域，与socket的domain一致</span><br><span class="line">addrbuf: sinaddr的指针</span><br><span class="line">str: 转换成的地址</span><br><span class="line">len: 字节单位长度</span><br></pre></td></tr></table></figure></li><li><p>addrlen: 地址长度</p></li></ul></li><li>监听端口号 <code>int listen(int sockfd, int backlog)</code><ul><li>sockfd: 要监听的sock描述字</li><li>backlog: socket可以排队的最大连接数</li></ul></li><li>接收用户请求 <code>int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen)</code><ul><li>sockfd: 服务器socket描述字</li><li>addr: 地址指针，保存用户对应的地址</li><li>addrlen： 地址长度。保存用户地址的长度</li><li>return: 一旦accept某个客户机请求成功，返回一个新的描述符，用于标识具体客户的TCP连接。</li></ul></li><li>从socket中读取字符 <code>ssize_t read(int fd, void *buf, size_t count)</code><ul><li>fd: 读取的用户对应的套间字描述字</li><li>buf: 保存接收信息的缓冲区</li><li>count: 读取的长度</li><li>return: 如果大于零表示读取的长度，返回0表示文件读取结束，小于0表示发生错误</li></ul></li><li>向socket发送信息 <code>ssize_t write(int fd, const void *buf, size_t count)</code><ul><li>fd: 发送的用户对应的套间字</li><li>buf: 缓冲区</li><li>count: 发送的信息长度</li><li>return: 如果大于零表示发送的长度，小于0表示发生错误</li></ul></li><li>关闭socket <code>int close(int fd)</code><ul><li>fd: accept返回的连接描述字，每个连接有一个，生命周期为连接周期。</li><li>ps: sockfd是监听描述字，一个服务器只有一个，用于监听是否有连接；fd是连接描述字，用于每个连接的操作。<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2></li></ul></li><li>创建socket <code>int socket(int domain, int type, int protocol)</code><ul><li>domain: 协议域，决定了socket的地址类型。<ul><li>AF_INET: 用于IPV4网络通信</li><li>AF_UNIX: 单一Unix系统中进程间通信</li><li>AF_INET6: 用于IPV6网络通信</li></ul></li><li>type: 制定socket类型。<ul><li>SOCK_STREAM: 流式，一般用于TCP通信</li><li>SOCK_DGRAM: 数据包式，一般用于UDP通信</li></ul></li><li>protocaol: 制定协议。 IPPROTO_TCP表示TCP协议，IPPROTO_UDP表示UDP协议，为0时自动选择type默认协议</li><li>return: -1 错误； 非负值 成功</li></ul></li><li>连接指定服务器 <code>int connect(int sockfd, struct sockaddr *addr, socklen_t addrlen)</code><ul><li>sockfd：客户端的sock描述字</li><li>addr: 服务器的地址</li><li>addrlen: socket地址长度</li></ul></li><li>向socket发送信息 <code>ssize_t write(int fd, const void *buf, size_t count)</code><ul><li>fd: 发送的用户对应的套间字</li><li>buf: 缓冲区</li><li>count: 发送的信息长度</li><li>return: 如果大于零表示发送的长度，小于0表示发生错误</li></ul></li><li>关闭socket <code>int close(int fd)</code><ul><li>fd: accept返回的连接描述字，每个连接有一个，生命周期为连接周期。</li></ul></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>客户端连接服务器，服务器向客户端发送当地时间，客户端接收并显示。<br>服务器端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">#define DEFAULT_PORT 6666</span><br><span class="line">#define BUF_LEN 128</span><br><span class="line"></span><br><span class="line">struct tm *GetBeijingTime();</span><br><span class="line">int main()&#123;</span><br><span class="line">int SocketServer;</span><br><span class="line">struct sockaddr_in ServerAddr;</span><br><span class="line">char Buf[BUF_LEN];</span><br><span class="line"></span><br><span class="line">//create socket</span><br><span class="line">if((SocketServer = socket(AF_INET, SOCK_STREAM, 0)) == -1)&#123;</span><br><span class="line">printf(&quot;create socket error!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//create addr</span><br><span class="line">memset((char*)&amp;ServerAddr, 0, sizeof(ServerAddr));</span><br><span class="line">ServerAddr.sin_family = AF_INET;</span><br><span class="line">ServerAddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">ServerAddr.sin_port = htons(DEFAULT_PORT);</span><br><span class="line"></span><br><span class="line">//bind the socket with address</span><br><span class="line">if(bind(SocketServer, (struct sockaddr*)&amp;ServerAddr, sizeof(ServerAddr)) == -1)&#123;</span><br><span class="line">printf(&quot;bind socket with addr fail!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//listen</span><br><span class="line">if(listen(SocketServer, 20) == -1)&#123;</span><br><span class="line">printf(&quot;listen error!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;server: waitting for client connect.........\n&quot;);</span><br><span class="line"></span><br><span class="line">//loop for accept</span><br><span class="line">while(1)&#123;</span><br><span class="line">int SocketClient;</span><br><span class="line">struct sockaddr_in ClientAddr;</span><br><span class="line">char ClientAddrString[30];</span><br><span class="line">socklen_t ClientAddrLen;</span><br><span class="line"></span><br><span class="line">if((SocketClient = accept(SocketServer, (struct sockaddr*)&amp;ClientAddr, &amp;ClientAddrLen)) == -1)&#123;</span><br><span class="line">printf(&quot;accept socket error!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">inet_ntop(AF_INET, &amp;ClientAddr.sin_addr, ClientAddrString, sizeof(ClientAddrString));</span><br><span class="line">printf(&quot;server: %s connecting .....\n&quot;, ClientAddrString);</span><br><span class="line"></span><br><span class="line">//get the time</span><br><span class="line">struct tm *beijingTime;</span><br><span class="line">beijingTime = GetBeijingTime();</span><br><span class="line">sprintf(Buf, &quot;TIME: %d/%d/%d %2.2d:%2.2d:%2.2d\n&quot;, beijingTime-&gt;tm_year,</span><br><span class="line">beijingTime-&gt;tm_mon, beijingTime-&gt;tm_mday, beijingTime-&gt;tm_hour,</span><br><span class="line">beijingTime-&gt;tm_min, beijingTime-&gt;tm_sec);</span><br><span class="line"></span><br><span class="line">//send the time </span><br><span class="line">if(write(SocketClient, Buf, strlen(Buf)) == 0)</span><br><span class="line">printf(&quot;server: send message error!\n&quot;);</span><br><span class="line"></span><br><span class="line">//close the socket connect</span><br><span class="line">close(SocketClient);</span><br><span class="line">printf(&quot;server: close the client\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">close(SocketServer);</span><br><span class="line"></span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct tm *GetBeijingTime()&#123;</span><br><span class="line">struct timeval tv;</span><br><span class="line">struct tm *BeijingTime;</span><br><span class="line">gettimeofday(&amp;tv, NULL);</span><br><span class="line">BeijingTime = gmtime((time_t*)&amp;(tv.tv_sec));</span><br><span class="line">BeijingTime-&gt;tm_year += 1900;</span><br><span class="line">BeijingTime-&gt;tm_hour += 8;</span><br><span class="line">BeijingTime-&gt;tm_mon += 1;</span><br><span class="line">return BeijingTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">#define BUF_LEN 128</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv)&#123;</span><br><span class="line">int SocketClient;</span><br><span class="line">char Buf[BUF_LEN];</span><br><span class="line">struct sockaddr_in ServerAddr;</span><br><span class="line"></span><br><span class="line">//create socket</span><br><span class="line">if((SocketClient = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)&#123;</span><br><span class="line">printf(&quot;create socket error\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//set the server&apos;s addr</span><br><span class="line">memset((char*)&amp;ServerAddr, 0, sizeof(ServerAddr));</span><br><span class="line">ServerAddr.sin_family = AF_INET;</span><br><span class="line">int port = atoi(argv[2]);</span><br><span class="line">ServerAddr.sin_port = htons(port);</span><br><span class="line">if(inet_pton(AF_INET, argv[1], &amp;ServerAddr.sin_addr) &lt;= 0)&#123;</span><br><span class="line">printf(&quot;inet_pton error!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//connect</span><br><span class="line">if(connect(SocketClient, (struct sockaddr*)&amp;ServerAddr, sizeof(struct sockaddr)) &lt; 0)&#123;</span><br><span class="line">printf(&quot;connect error!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memset(Buf, 0, BUF_LEN);</span><br><span class="line">//read the message from server</span><br><span class="line">if(recv(SocketClient, Buf, BUF_LEN, 0) &lt; 0)&#123;</span><br><span class="line">printf(&quot;recv error!!\n&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;Client: recv from server-&gt; %s\n&quot;, Buf);</span><br><span class="line"></span><br><span class="line">//close socket</span><br><span class="line">close(SocketClient);</span><br><span class="line"></span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何获取时间&quot;&gt;&lt;a href=&quot;#如何获取时间&quot; class=&quot;headerlink&quot; title=&quot;如何获取时间&quot;&gt;&lt;/a&gt;如何获取时间&lt;/h1&gt;&lt;p&gt;UNIX时间戳：从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。&lt;br&gt;UTC时间：
      
    
    </summary>
    
      <category term="linux学习" scheme="http://victorjiangxin.github.io/categories/linux%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="http://victorjiangxin.github.io/tags/linux/"/>
    
      <category term="socket" scheme="http://victorjiangxin.github.io/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>kerberos认证浅析</title>
    <link href="http://victorjiangxin.github.io//kerberos%E8%AE%A4%E8%AF%81/"/>
    <id>http://victorjiangxin.github.io//kerberos认证/</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是kerberos"><a href="#什么是kerberos" class="headerlink" title="什么是kerberos"></a>什么是kerberos</h1><p>Kerberos是个用于安全认证的第三方协议，它采用了传统的共享密钥的方式，实现了在网络环境不一定保证安全的环境下，Client和Server之间的通信。</p><h1 id="kerberos协议基本原理"><a href="#kerberos协议基本原理" class="headerlink" title="kerberos协议基本原理"></a>kerberos协议基本原理</h1><p><img src="/img/kerberos_0.png" alt=""><br>A与B之间有一个密钥key(A,B)，这个密钥只有它们两者拥有。<br>当A需要向B证明它是A时，发送两条信息。<br>一条为A的用户信息的明文，另一条为使用密钥key加密过的明文信息。<br>B接收后，用密钥key进行解密，然后将解密后的信息与明文信息比较。<br>如果他们是一样的，则表明对方就是A。从而，B确认A的身份。</p><h1 id="引入KDC：key-A-B-从何而来"><a href="#引入KDC：key-A-B-从何而来" class="headerlink" title="引入KDC：key(A,B)从何而来"></a>引入KDC：key(A,B)从何而来</h1><p>为了保证认证的安全性，key(A,B)应该是有时效性的，不能是固定的。<br>因此KDC在整个认证系统中起共同信任的第三方作用。<br><img src="/img/kerberos_1.png" alt=""></p><h2 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h2><ul><li>A向KDC发出申请，申请中包含了A的身份信息</li><li>KDC查询白名单，如果A存在则向A发送两条信息<ul><li>第一条为Encrypt(key(A,B), Pubkey_A)，使用A的公钥加密的key(A,B)</li><li>第二条为Encrypt(A_Info+key(A,B), Pubkey_B)，使用B的公钥加密的A_Info与key(A,B)信息</li></ul></li><li>A使用私钥对Encrypt(key(A,B), Pubkey_A)信息解密，得到key(A,B)</li><li>A开始向B进行认证申请，发送两条信息<ul><li>第一条为Encrypt(A_Info+Timestamp, key(A,B))，使用key(A,B)加密的A_Info和时间戳信息</li><li>第二条为Encrypt(A_Info+key(A,B), Pubkey_B)</li></ul></li><li>B接收到A发送的信息后：<ul><li>先用私钥解密Encrypt(A_Info+key(A,B), Pubkey_B)，得到key(A,B)</li><li>然后用Key(A,B)解码Encrypt(A_Info+Timestamp, key(A,B))，比较A_Info，相同则成功认证。<h1 id="加时间戳的目的"><a href="#加时间戳的目的" class="headerlink" title="加时间戳的目的"></a>加时间戳的目的</h1>B每次接收到A的认证信息后，如果发现时间戳与当前时间在范围外，则判定失效，保证安全<h1 id="Kerberos的优点"><a href="#Kerberos的优点" class="headerlink" title="Kerberos的优点"></a>Kerberos的优点</h1></li></ul></li><li>较高的性能。KDC参与次数少，相比较完全依赖可信赖的第三方方案比较，具有较大的性能提升</li><li>实现了双向验证</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是kerberos&quot;&gt;&lt;a href=&quot;#什么是kerberos&quot; class=&quot;headerlink&quot; title=&quot;什么是kerberos&quot;&gt;&lt;/a&gt;什么是kerberos&lt;/h1&gt;&lt;p&gt;Kerberos是个用于安全认证的第三方协议，它采用了传统的共享密钥
      
    
    </summary>
    
      <category term="计算所" scheme="http://victorjiangxin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%89%80/"/>
    
    
      <category term="密码学" scheme="http://victorjiangxin.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="kerberos认证" scheme="http://victorjiangxin.github.io/tags/kerberos%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>github使用相关</title>
    <link href="http://victorjiangxin.github.io//github%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/"/>
    <id>http://victorjiangxin.github.io//github使用相关/</id>
    <published>2018-04-12T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用操作及代码"><a href="#常用操作及代码" class="headerlink" title="常用操作及代码"></a>常用操作及代码</h1><ul><li><p>生成SSH key </p><ul><li>ssh -keygen -t rsa</li><li>ssh -T git@github.com  </li></ul></li><li><p>克隆版本库 git clone <url>  </url></p></li><li><p>上传文件  </p><ul><li>git add &lt;文件名，如果是全部，可以用add .&gt;  </li><li>git commit -m “文件描述”  </li><li>git push origin master （把本地代码推送到远程master分支）</li><li>git pull -u origin master (把远程代码拉下，保证代码同步)  </li></ul></li><li><p>将本地项目与Github上的一个项目进行关联。先切换到目的目录，执行下面命令,把远程仓库的名字命名为origin<br><code>git remote add origin git@github.com:&lt;USERNAME&gt;/&lt;User.resource&gt;.git</code>  </p></li><li>提交项目前，注意！！！一定要先设置用户名与邮箱  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git config —global user.name &quot;&lt;your name&gt;&quot;</span><br><span class="line">git config —global user.email &quot;&lt;your email&gt;&quot;</span><br><span class="line">```  </span><br><span class="line">* 创建分支  </span><br><span class="line">`git checkout -b &lt;branch name&gt;`  </span><br><span class="line"></span><br><span class="line"># 本地已有版本库，要推送至Github</span><br><span class="line">首先，Github上已有一个Repository, `git@github.com:VictoryJiangXin/mShell.git`</span><br><span class="line">然后，进入目录，比如f:\mShell</span><br><span class="line">然后命令步骤如下：</span><br></pre></td></tr></table></figure></li></ul><p>git init<br>git remote add <repository's name=""> git@github.com:VictoryJiangXin/mShell.gitgit add <the file="" you="" need="">git commit -m "<the description="" of="" commit="">"git push -u <repository's name=""> master<br>```</repository's></the></the></repository's></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用操作及代码&quot;&gt;&lt;a href=&quot;#常用操作及代码&quot; class=&quot;headerlink&quot; title=&quot;常用操作及代码&quot;&gt;&lt;/a&gt;常用操作及代码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;生成SSH key &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh -keygen -t rs
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Github" scheme="http://victorjiangxin.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>开源代码License</title>
    <link href="http://victorjiangxin.github.io//GithubLicense%E7%9B%B8%E5%85%B3/"/>
    <id>http://victorjiangxin.github.io//GithubLicense相关/</id>
    <published>2018-04-10T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><p>开源代码有个很重要的文件，License这涉及到制作者的知识产权，因此特查看相关博客。<br>下面一张图进行说明。图片来源：阮一峰 老师博客<br><img src="/img/Github_License.png" alt="License简单说明"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h1&gt;&lt;p&gt;开源代码有个很重要的文件，License这涉及到制作者的知识产权，因此特查看相关博客。&lt;br&gt;下面一张图进行说明。图片来源：阮一峰 老师博客
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Github" scheme="http://victorjiangxin.github.io/tags/Github/"/>
    
      <category term="开源许可证" scheme="http://victorjiangxin.github.io/tags/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>SqlServer使用</title>
    <link href="http://victorjiangxin.github.io//SqlServer%E4%BD%BF%E7%94%A8/"/>
    <id>http://victorjiangxin.github.io//SqlServer使用/</id>
    <published>2018-04-10T07:01:52.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sql-Server相关"><a href="#Sql-Server相关" class="headerlink" title="Sql Server相关"></a>Sql Server相关</h1><p>在使用Sql Server进行存储时，碰到两个巨大的坑！  </p><ul><li>一个就是关于数据库版本的问题，SQL Server在WIN7系统上无法运行2017的版本，智能运行2014的版本。  </li><li>一个就是SQL Server的自身版本问题，SQL Server有两种，一种是EXPRESS版，它最多只能存储10G的数据，一种是企业版，它能存储不限量的数据。</li></ul><h1 id="SSMS连接SQL-Server数据库"><a href="#SSMS连接SQL-Server数据库" class="headerlink" title="SSMS连接SQL Server数据库"></a>SSMS连接SQL Server数据库</h1><p>在使用SQL Server时，我们常常使用SSMS操作数据库，对数据库进行可视化的操作。在使用SSMS操作数据库时，首先要进行数据库连接<br>我的数据库是默认安装的，命名为SQ2，但是，在填写数据库服务器名时，我填写SQ2，却一直无法连接到数据库，最后才发现，要使用localhost\SQ2作为名字，才可以进行连接！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sql-Server相关&quot;&gt;&lt;a href=&quot;#Sql-Server相关&quot; class=&quot;headerlink&quot; title=&quot;Sql Server相关&quot;&gt;&lt;/a&gt;Sql Server相关&lt;/h1&gt;&lt;p&gt;在使用Sql Server进行存储时，碰到两个巨大的坑！  
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据库" scheme="http://victorjiangxin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL Server" scheme="http://victorjiangxin.github.io/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>SQL数据库相关操作</title>
    <link href="http://victorjiangxin.github.io//%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://victorjiangxin.github.io//数据库/</id>
    <published>2018-04-03T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库定义语句"><a href="#数据库定义语句" class="headerlink" title="数据库定义语句"></a>数据库定义语句</h1><p><img src="/img/SQL_0.png" alt="">  </p><h2 id="CREAT语句-建表"><a href="#CREAT语句-建表" class="headerlink" title="CREAT语句_建表"></a>CREAT语句_建表</h2><p>CREAT语句用于创建数据库、表、视图等操作。语句格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &lt;表名&gt;(  </span><br><span class="line">&lt;列名&gt;&lt;数据类型&gt;[&lt;列级完整性约束条件&gt;],  </span><br><span class="line">&lt;列名&gt;&lt;数据类型&gt;[&lt;列级完整性约束条件&gt;],  </span><br><span class="line">&lt;表级完整性约束条件&gt;);</span><br></pre></td></tr></table></figure></p><p>&lt;表级完整性约束条件&gt;: 涉及一个或多个属性列的完整性约束条件<br>常用完整性约束:</p><ul><li>主码约束: PRIMARY KEY</li><li>参照完整性约束:<ul><li>唯一性约束： UNIQUE</li><li>非空值约束： NOT NULL</li><li>取值约束： CHECK</li></ul></li><li>数据类型： 在SQL Server中，有几种主要的类型——文本、数字、二进制数据和日期<ul><li>文本类型<ul><li>CHAR(size) 保持固定长度的字符串。n的取值：1-8000</li><li>VARCHAR(size) 保持可变长度的字符串。在括号中指定字符串的最大长度，最多为8000个字符，效率没CHAR高</li><li>TEXT 最多存放长度为 2^31-1 个字符的字符串</li><li>NCHAR(n) 固定长度，Unicode字符串数据。n的取值1-4000</li><li>NVARCHAR(n) 可变长度，Unicode字符串数据。n的取值范围1-4000</li><li>NTEXT 长度可变的Unicode数据，字符串最大长度为2^30-1</li></ul></li><li>数字类型<ul><li>BIT 0/1或NULL的数据类型</li><li>BIGINT 8字节存储的INT数据类型</li><li>INT 4字节存储的INT数据类型</li><li>SMALLINT 2字节存储的INT数据类型</li><li>TINYINT 1字节存储的INT数据类型</li><li>DECIMAL[(P[,S])] []表示可选择的。固定精度和小数位数，p表示精度，s表示小数位数</li><li>FLOAT[(n)] 浮点数，其中n用于存储flaot数值尾数的尾数，用于确定精度</li></ul></li><li>二进制类型<ul><li>BINARY(n) 固定长度，n的取值：1~8000</li><li>VARBINARY(n) 可变长度，最多为长度n，n的取值：1~8000</li><li>IMAGE 长度可变的二进制数据，从0到2^31-1个字节</li></ul></li><li>时间类型<ul><li>TIME 00:00:00.0000000到23:59:59:9999999</li><li>DATE 0001-01-01到9999-12-31</li><li>SMALLDATETIME 日期范围:1900-01-01到2079-06-06 时间范围:00:00:00到23:59:59</li><li>DATATIME 日期范围:1753-01-01到9999-12-31 时间范围:00:00:00到23:59:59.997</li><li>DATATIME2 日期范围:0001-01-01到9999-12-31 时间范围:00:00:00到23:59:59.9999999  </li></ul></li></ul></li></ul><p>举例：创建一个学生表，包括学号、姓名、性别、年龄及所在系。其中学号不能为空，且唯一，姓名取值也唯一。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Student(  </span><br><span class="line">StudentNumber CHAR(5) NOT NULL UNIQUE,  </span><br><span class="line">StudentName CHAR(20) UNIQUE,  </span><br><span class="line">StudentSex CHAR(1),  </span><br><span class="line">StudentAge INT,</span><br><span class="line">StudentDept CHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="CREAT语句-建索引"><a href="#CREAT语句-建索引" class="headerlink" title="CREAT语句_建索引"></a>CREAT语句_建索引</h2><p>建立索引是加快查询速度的有效手段。<br>索引建立方式：  </p><ul><li>DBMS自行建立<ul><li>PRIMARY KEY</li><li>UNIQUE  </li></ul></li><li>DBA或表的属主（建表的人）根据需要建立。  </li></ul><p>维护索引：DBMS自动完成<br>语句格式:<br><code>CREAT [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt; ON &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;][,&lt;列名&gt;[&lt;次序&gt;]]...);</code> </p><p>索引可以建立在该表的一列或多列上。<br>次序表示升序或者降序表示，升序：ASC，降序：DESC。缺省值：ASC<br>UNIQUE表示索引的每一个索引值只对应唯一的数据记录。<br>CLUSTER表示要建立的索引是聚簇索引。<br>注意：如果是含重复值的属性列不能建立UNIQUE索引，<br>聚簇索引，基表中的数据也需要按指定的聚簇属性的升序或降序存放。  </p><h2 id="ALTER语句"><a href="#ALTER语句" class="headerlink" title="ALTER语句"></a>ALTER语句</h2><p>ALTER语句用于修改各表项的内容，其语句格式如下所示：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">[ADD &lt;新列名&gt; &lt;数据类型&gt; [完整性约束]]</span><br><span class="line">[DROP &lt;完整性约束名&gt;]</span><br><span class="line">[MODIFY &lt;列名&gt; &lt;数据结构&gt;];</span><br></pre></td></tr></table></figure><p>-表名：要修改的基本表<br>-ADD子句：增加新列和新的完整性约束条件<br>-DROP子句：删除指定的完整性约束条件<br>-MODIFY子句：用于修改名列名和数据类型<br>-只能间接删除属性列</p><pre><code>* 把表中要保留的列及其内容复制到一个新表中* 删除原表* 再将新表命名为原表名  </code></pre><p>-不能修改完整性约束<br>-不能为已有列增加完整性约束<br>举例：向Student表中增加“入学时间”列，其数据类型为日期型。  </p><p><code>ALTER TABLE Student ADD StudentCome DATE</code>  </p><h2 id="DROP语句"><a href="#DROP语句" class="headerlink" title="DROP语句"></a>DROP语句</h2><p>DROP语句用于删除表项，其语句格式如下所示：  </p><p><code>DROP TABLE &lt;表名&gt;;</code>  </p><p>-系统从数据字典中删去1、该基本表的描述；2、该基本表上的所有索引的描述。<br>-系统从文件中删去表中数据<br>-表上的视图仍然保留，但无法引用<br>举例：删除Student表。<br><code>DROP TABLE Student</code>  </p><h1 id="数据库操作语句"><a href="#数据库操作语句" class="headerlink" title="数据库操作语句"></a>数据库操作语句</h1><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><p>查询语句表达式如下所示:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT [ALL|DISTICT] </span><br><span class="line">&lt;目标表达式&gt;[&lt;别名&gt;]</span><br><span class="line">[,&lt;目标表达式&gt;[&lt;别名&gt;]]</span><br><span class="line">FROM &lt;表名或视图名&gt;[&lt;别名&gt;]</span><br><span class="line">[,&lt;表名或视图名&gt;[&lt;别名&gt;]]</span><br><span class="line">[WHERE &lt;条件表达式&gt;]</span><br><span class="line">[GROUP BY &lt;列名&gt;[,&lt;列名&gt;] [HAVING&lt;条件表达式&gt;]]</span><br><span class="line">[ORDER BY &lt;列名&gt;[,&lt;列名&gt;][ASC|DESC]];</span><br></pre></td></tr></table></figure><p>-SELECT子句：指定要显示的属性列<br>-FROM子句：指定查询对象（基本表或视图）<br>-WHERE字句：指定查询条件<br>-GROUP BY字句： 对查询结果按指定列的值分组，该属性列值相等的元组为一个组。通常会在每组中作用集函数。<br>-HAVING短语：筛选出满足指定条件的组<br>-ORDER BY子句：对查询结果表按指定列序的升序排序或者降序排序  </p><h3 id="WHER子句"><a href="#WHER子句" class="headerlink" title="WHER子句"></a>WHER子句</h3><p><img src="/img/SQL_1.png" alt="">  </p><ol><li>确认范围: BETWEEN…AND… / NOT BETWEEN…AND…比如  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname，Sdept，Sage</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sage BETWEEN 20 AND 23；</span><br></pre></td></tr></table></figure><ol><li><p>确认集合：IN &lt;值表&gt; NOT IN &lt;值表&gt;。&lt;值表&gt;：用逗号分隔的一组取值。比如  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname，Ssex</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept IN ( &apos;IS&apos;，&apos;MA&apos;，&apos;CS&apos; );</span><br></pre></td></tr></table></figure></li><li><p>字符串匹配：使用谓词LIKE或NOT LIKE [NOT] LIKE ‘&lt;匹配串&gt;’[ESCAPE‘&lt;换码字符&gt;‘]比如  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT  * </span><br><span class="line">FROM  Student </span><br><span class="line">WHERE Sno = &apos;95001&apos;；</span><br><span class="line"></span><br><span class="line">SELECT Sname，Sno，Ssex</span><br><span class="line">FROM Student</span><br><span class="line">WHERE  Sname LIKE ‘刘%’；</span><br><span class="line"></span><br><span class="line">SELECT Cno，Ccredit</span><br><span class="line">FROM Course</span><br><span class="line">WHERE Cname LIKE &apos;DB\_Design&apos; ESCAPE &apos;\&apos;</span><br><span class="line">使用换码字符将通配符转义为普通字符，ESCAPE换码字符</span><br></pre></td></tr></table></figure></li><li><p>涉及空值的查询：使用谓语 IS NULL 或 IS NOT NULL  </p></li></ol><h3 id="5类主要集函数"><a href="#5类主要集函数" class="headerlink" title="5类主要集函数"></a>5类主要集函数</h3><ol><li>计数<ul><li>COUNT([DISTINCT|ALL]*)</li><li>COUNT([DISTINCT|ALL]&lt;列名&gt;)  </li></ul></li><li>计算总和<ul><li>SUM([DISTINCT|ALL]&lt;列名&gt;)</li></ul></li><li>计算平均值<ul><li>AVG([DISTINCT|ALL]&lt;列名&gt;)</li></ul></li><li>求最大值<ul><li>MAX([DISTINCT|ALL]&lt;列名&gt;)</li></ul></li><li>求最小值<ul><li>MIN([DISTINCT|ALL]&lt;列名&gt;)  </li></ul></li></ol><p>-DISTINCT短语：在计算中要取消指定列中的重复值<br>-ALL短语：不取消重复值<br>-ALL为缺省值  </p><h4 id="使用集函数"><a href="#使用集函数" class="headerlink" title="使用集函数"></a>使用集函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例： </span><br><span class="line">计算1号课程的学生平均成绩。</span><br><span class="line">     SELECT AVG(Grade)</span><br><span class="line">     FROM SC</span><br><span class="line">     WHERE Cno= &apos; 1 &apos;；</span><br></pre></td></tr></table></figure><h4 id="GROUP语句与HAVING语句"><a href="#GROUP语句与HAVING语句" class="headerlink" title="GROUP语句与HAVING语句"></a>GROUP语句与HAVING语句</h4><ol><li>使用GROUP BY进行分组  <ul><li>分组方法：按指定的一列或多列值分组，值相等的为一组。</li><li>使用GROUP BY子句后，SELECT子句的列名列表中只能出现分组属性和集函数</li><li>GROUP BY子句的作用对象是查询的中间结果表。  </li></ul></li><li>使用HAVING语句筛选最终结果  <ul><li>只有满足HAVING短语语句指定条件的组才输出。</li><li>HAVING短语与WHERE子句的不同：作用对象不同。WHERE基于表，HAVING作用于组。  </li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询选修了3门以上课程的学生学号</span><br><span class="line">SELECT Sno</span><br><span class="line">FROM SC</span><br><span class="line">GROUP BY Sno</span><br><span class="line">HAVING COUNT(*) &gt;3；</span><br></pre></td></tr></table></figure><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><p>查询只涉及一个表，是一种最简单的查询操作。<br>如果需要显示所有的列，并且按照原表顺序，可用<code>SELECT *</code>子句<br>如果要消除重复的内容，可加<code>DISTICT</code>语句，比如<code>SELECT DISTICT StudentNumber</code>  </p><h3 id="连续查询"><a href="#连续查询" class="headerlink" title="连续查询"></a>连续查询</h3><p>同时涉及多个表的查询称为连接查询。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT Std.Sname, Std.Ssex, Sdept</span><br><span class="line">FROM   Std，StdC</span><br><span class="line">WHERE  Std.Sname = StdC.Sname   /* 连接谓词 */</span><br><span class="line">AND     Std.Ssex = StdC.Ssex /* 连接谓词 */</span><br><span class="line">AND    StdC.Cno= &apos; 2 ‘          /* 其他限定条件 */</span><br><span class="line">AND    StdC.Grade&gt;90；      /* 其他限定条件 */</span><br></pre></td></tr></table></figure></p><h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p>概述：一个SELECT-FROM-WHERE语句称为一个查询块。将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname外层查询/父查询</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sno IN</span><br><span class="line">（SELECT Sno             内层查询/子查询</span><br><span class="line">  FROM SC</span><br><span class="line">  WHERE Cno= &apos; 2 &apos;);</span><br></pre></td></tr></table></figure></p><h2 id="数据更新语句"><a href="#数据更新语句" class="headerlink" title="数据更新语句"></a>数据更新语句</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="插入单个元组"><a href="#插入单个元组" class="headerlink" title="插入单个元组"></a>插入单个元组</h4><p>功能：将新元组插入指定表中。<br>语句格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT</span><br><span class="line">INTO &lt;表名&gt; [(&lt;属性列1&gt;[，&lt;属性列2 &gt;…)]</span><br><span class="line">VALUES (&lt;常量1&gt; [，&lt;常量2&gt;]…)</span><br></pre></td></tr></table></figure></p><ol><li>INTO子句<ul><li>指定要插入数据的表名及属性列</li><li>属性列的顺序可与表定义中的顺序不一致</li><li>没有指定属性列：表示要插入的是一条完整的元组，且属性列属性与表定义中的顺序一致</li><li>指定部分属性列：插入的元组在其余属性列上取空值  </li></ul></li><li>VALUES子句<ul><li>提供的值必须与INTO子句匹配  </li></ul></li></ol><h4 id="插入子查询结果"><a href="#插入子查询结果" class="headerlink" title="插入子查询结果"></a>插入子查询结果</h4><p>功能：将子查询结果插入指定表中。<br>语句格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT </span><br><span class="line">INTO &lt;表名&gt; [(&lt;属性列1&gt; [，&lt;属性列2&gt;…  )]</span><br><span class="line">子查询:</span><br></pre></td></tr></table></figure></p><ol><li>INFO子句与上相同。</li><li>子查询  <ul><li>SELCET子句目标项必须与INFO子句匹配。  </li></ul></li></ol><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>功能： 修改指定表中满足WHERE子句条件的元组。<br>语句格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE  &lt;表名&gt;</span><br><span class="line">SET &lt;列名&gt;=&lt;表达式&gt;[，&lt;列名&gt;=&lt;表达式&gt;]…</span><br><span class="line">[WHERE &lt;条件&gt;]；</span><br></pre></td></tr></table></figure></p><ol><li>SET子句  <ul><li>指定要修改的方式。</li></ul></li><li>WHERE子句  <ul><li>指定要修改的元组，缺省表示要修改所有的元组。<br>示例：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE SC</span><br><span class="line">SET  Grade=0</span><br><span class="line">WHERE  &apos;CS&apos;=</span><br><span class="line">(SELETE Sdept</span><br><span class="line"> FROM  Student</span><br><span class="line"> WHERE  Student.Sno = SC.Sno)；</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>功能： 删除指定表中满足WHERE子句条件的元组。<br>语句格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE</span><br><span class="line">FROM &lt;表名&gt;</span><br><span class="line">[WHERE &lt;条件&gt;]；</span><br></pre></td></tr></table></figure></p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="建立视图"><a href="#建立视图" class="headerlink" title="建立视图"></a>建立视图</h2><p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。<br>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。<br>我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。<br>注释：数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。<br>语句格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE  VIEW  &lt;视图名&gt;  </span><br><span class="line">               [(&lt;列名&gt; [，&lt;列名&gt;]…)]</span><br><span class="line">AS  &lt;子查询&gt;</span><br><span class="line">[WITH  CHECK  OPTION]；</span><br></pre></td></tr></table></figure></p><ol><li>组成视图的属性列名或全部省略或全部指定。  <ul><li>省略视图的各个属性列名，则隐含该视图由子查询中SELECT子句目标列中的诸字段组成。  </li><li>必须明确指定组成视图的所有列名的情形。  <ul><li>某个目标列不是单纯的属性名，而是集函数或列表达式  </li><li>目标列为*  </li><li>多表连接时选出了几个同名列作为视图的字段  </li><li>需要在视图中为某个列启用新的更合适的名字  </li></ul></li></ul></li><li>子查询  <ul><li>不含ORDER BY子句和DISTINCT短语的SELECT语句  </li></ul></li><li>WITH CHECK OPTION  <ul><li>透过视图进行增删改操作时，不得破坏视图定义中的谓词条件（即子查询中的条件表达式）  </li></ul></li></ol><h1 id="JOIN语句"><a href="#JOIN语句" class="headerlink" title="JOIN语句"></a>JOIN语句</h1><p>有时为了得到完整的结果，我们需要从两个或更多的表中获取结果。我们就需要执行 join。<br>数据库中的表可通过键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。<br>在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class="line">FROM Persons</span><br><span class="line">INNER JOIN Orders</span><br><span class="line">ON Persons.Id_P = Orders.Id_P</span><br><span class="line">ORDER BY Persons.LastName</span><br></pre></td></tr></table></figure></p><ol><li>INNER JOIN(内连接):在表中存在至少一个匹配时，INNER JOIN 关键字返回行。   </li><li>JOIN: 如果表中有至少一个匹配，则返回行。  </li><li>LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行。  </li><li>RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行。  </li><li>FULL JOIN: 只要其中一个表中存在匹配，就返回行。  </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库定义语句&quot;&gt;&lt;a href=&quot;#数据库定义语句&quot; class=&quot;headerlink&quot; title=&quot;数据库定义语句&quot;&gt;&lt;/a&gt;数据库定义语句&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/SQL_0.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;h2 id=&quot;CR
      
    
    </summary>
    
      <category term="数据库" scheme="http://victorjiangxin.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://victorjiangxin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL语句" scheme="http://victorjiangxin.github.io/tags/SQL%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>比特币：脚本与地址</title>
    <link href="http://victorjiangxin.github.io//bitcoininin-scriptAddr/"/>
    <id>http://victorjiangxin.github.io//bitcoininin-scriptAddr/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自: <a href="https://furrybear.github.io/%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%9A%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%9C%B0%E5%9D%80/" target="_blank" rel="noopener">https://furrybear.github.io/%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%9A%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%9C%B0%E5%9D%80/</a></p><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><ul><li>非压缩式公钥65字节（04开头）</li><li>压缩式公钥33字节（02、03开头）</li><li>公钥哈希20字节</li><li>脚本哈希20字节（或者32字节，但是没有见过实例）</li><li>地址（由公钥哈希和脚本哈希组装和编码而来）<ul><li>P2PKH型：1开头，例如1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2，由公钥哈希组装和编码而来</li><li>P2SH型：3开头，例如3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy，由脚本哈希组装和编码而来<ul><li>bech32型：bc1来头，例如bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq，它是前两种地址的另一种表达格式，现在blockchain.info只在有“native witness program”的时候使用这种格式</li><li>签名七十几字节（由第二个字节决定<br><img src="/img/bitcoinAddr.png" alt=""></li></ul></li></ul></li></ul><h1 id="非隔离见证-无Marker和Flag的"><a href="#非隔离见证-无Marker和Flag的" class="headerlink" title="非隔离见证(无Marker和Flag的)"></a>非隔离见证(无Marker和Flag的)</h1><ul><li>锁定脚本：41&lt;非压缩式公钥&gt;(65bytes)AC（1开头地址）</li><li>锁定脚本(不太确定)：（P2PK型多重签名)OP_2 &lt;公钥1&gt; &lt;公钥2&gt; &lt;公钥3&gt; OP_3 CHECKMULTISIG(0xAE)（1开头地址）</li><li>锁定脚本：76A914&lt;公钥哈希&gt;(20bytes)88AC（1开头地址）</li><li>锁定脚本：76A920&lt;公钥哈希&gt;(32bytes)87AC（1开头地址）</li><li>锁定脚本：A914&lt;脚本哈希&gt;(20bytes)87（3开头地址）</li><li>锁定脚本：6A(40bytes?)（没有地址，资金锁住了）<h1 id="隔离见证交易（有marker和flag的）"><a href="#隔离见证交易（有marker和flag的）" class="headerlink" title="隔离见证交易（有marker和flag的）"></a>隔离见证交易（有marker和flag的）</h1></li><li>锁定脚本：0014&lt;哈希&gt;(20bytes)（bc1开头地址）</li><li>锁定脚本：0020&lt;哈希&gt;(32bytes)（bc1开头地址）</li><li>锁定脚本：A914&lt;脚本哈希&gt;(20bytes)87（3开头地址）</li><li>锁定脚本：A920&lt;脚本哈希&gt;(32bytes)87（3开头地址）<h1 id="非隔离见证交易"><a href="#非隔离见证交易" class="headerlink" title="非隔离见证交易"></a>非隔离见证交易</h1><h2 id="P2PKH（Pay-to-Public-Key-Hash）"><a href="#P2PKH（Pay-to-Public-Key-Hash）" class="headerlink" title="P2PKH（Pay-to-Public-Key-Hash）"></a>P2PKH（Pay-to-Public-Key-Hash）</h2><h3 id="单签名（第一种）"><a href="#单签名（第一种）" class="headerlink" title="单签名（第一种）"></a>单签名（第一种）</h3>//解锁脚本： OP_DUP OP_HASH160<br>锁定脚本：OP_DUP(0x76) OP_HASH160(0xA9) PUSHDATA20(0x14) (20bytes) OP_EQUAL(0x87) OP_CHECKSIG(0xAC)<br>举例：（书上说有这种交易，没有找到实例）<h3 id="单签名（第二种）"><a href="#单签名（第二种）" class="headerlink" title="单签名（第二种）"></a>单签名（第二种）</h3>//解锁脚本： OP_DUP OP_HASH160<br>锁定脚本：OP_DUP(0x76) OP_HASH160(0xA9) PUSHDATA20(0x14) (20bytes) OP_EQUALVERIFY(0x88) OP_CHECKSIG(0xAC)<br>交易举例：99c2f5d3f1a1c89a4afa522361c55664e7777c71b02fd66cdf4e2ba190551d11、5a4ebf66822b0b2d56bd9dc64ece0bc38ee7844a23ff1d7320a88c5fdb2ad3e2<h2 id="P2PK（Pay-to-Public-Key）"><a href="#P2PK（Pay-to-Public-Key）" class="headerlink" title="P2PK（Pay-to-Public-Key）"></a>P2PK（Pay-to-Public-Key）</h2><h3 id="单签名"><a href="#单签名" class="headerlink" title="单签名"></a>单签名</h3>锁定脚本：PUSHDATA65BYTES(0x41) &lt;非压缩式公钥&gt;(65bytes) OP_CHECKSIG(0xAC)<br>(获取公钥后需要通过HASH160获得公钥哈希)<br>这是比特币最早的锁定脚本，coinbase一般是这种形式。<br>交易举例：创世区块的交易<h3 id="多重签名"><a href="#多重签名" class="headerlink" title="多重签名"></a>多重签名</h3>锁定脚本：M PUSHDATA65(0x41) PUSHDATA65(0x41)<br>… PUSHDATA65(0x41) N OP_CHECKMULTISIG(0xAE)<br>（因为实例没有找到，这个锁定脚本形式有待验证，因为M是个操作数，但是之前没有操作码）<br>交易举例：（没找到）<h2 id="P2SH"><a href="#P2SH" class="headerlink" title="P2SH"></a>P2SH</h2>赎回脚本（2-3）：<br>OP_2(0x52)<br>OP_PUSHDATA33BYTES(0x21)&lt;压缩式公钥1&gt;<br>OP_PUSHDATA33BYTES(0x21)&lt;压缩式公钥2&gt;<br>OP_PUSHDATA33BYTES(0x21)&lt;压缩式公钥3&gt;<br>OP_3(0x53)<br>OP_CHECKMULTISIG(0xAE)<br>解锁脚本：<br>OP_PUSHDATA?BYTES<br>OP_PUSHDATA?BYTES<br>OP_PUSHDATA?BYTES &lt;赎回脚本&gt;<br>锁定脚本：<br>HASH160(0xA9)<br>PUSHDATA20(0x14) &lt;脚本哈希（赎回脚本的HASH160）&gt;(20bytes) OP_EQUAL(0x87)<br>举例：<br>txid为<code>521f7c6781ced91da6cc8eb4c64b283d2e99f98627daf8a3a0c60432d8e8f601</code>的输入<br>解锁脚本：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">00//这是要注意！这是什么？？？版本号？</span><br><span class="line">OP_PUSHDATA71BYTES(0x47)</span><br><span class="line">3044022027eec2f3081b87d271e32e126c9ccb4d2c4afa7ef14f7cff644723784b720ede02203e278a13e3544bd32abe6592e4e17a7331272db4a2b780113ed24e3ca3c37f3201//签名1</span><br><span class="line">OP_PUSHDATA72BYTES(0x48)</span><br><span class="line">30450221009e450de0b27f95db02d7ab8b5943c62b8e2f50eabfb017f509684c4f58892d7802203b8640c5f17b8e6239a65f66bbb26ea952dac9d0eefffd114d97878b2ac1da4f01//签名1</span><br><span class="line">OP_PUSHDATA1(0x4c)69</span><br><span class="line">OP_2(0x52)</span><br><span class="line">OP_PUSHDATA33BYTES(0x21)</span><br><span class="line">02ca355b567bff51c9b4a1c1590e25f685f8d12273efb7f7685a50e546786d0de7//公钥1</span><br><span class="line">OP_PUSHDATA33BYTES(0x21)</span><br><span class="line">03e5fa93cffa7533c6b68906c4a9b8665f5167f3ed95b830328835ca4d39b6495f//公钥2</span><br><span class="line">OP_PUSHDATA33BYTES(0x21)</span><br><span class="line">03ee6664f625e0a44fad0ad53ae1ecdc7c7239346b81514e8f87cfd2be4f8fec21//公钥3</span><br><span class="line">OP_3(0x53) </span><br><span class="line">OP_CHECKMULTISIG(0xae)</span><br></pre></td></tr></table></figure></li></ul><p>锁定脚本：<br><code>a914d0982dd391d674f101898e8500586019e01d9aa787</code></p><h1 id="OPRETURN"><a href="#OPRETURN" class="headerlink" title="OPRETURN"></a>OPRETURN</h1><p>锁定脚本：OP_RETURN(0x6A) (40bytes?)<br>输出不能被花费。</p><h1 id="纯隔离见证交易"><a href="#纯隔离见证交易" class="headerlink" title="纯隔离见证交易"></a>纯隔离见证交易</h1><p>witness_version在witness字段内，锁定脚本必然以一个版本号开头</p><h2 id="P2WPKH（pay-to-witness-public-key-hash）"><a href="#P2WPKH（pay-to-witness-public-key-hash）" class="headerlink" title="P2WPKH（pay-to-witness-public-key-hash）"></a>P2WPKH（pay-to-witness-public-key-hash）</h2><p>witness:<br>解锁脚本: 空<br>锁定脚本: witness_version(0x00) PUSHDATA20BYTES(0x14) &lt;公钥哈希&gt;(20bytes)</p><p>交易举例：没有找到实例……</p><h2 id="P2WSH（pay-to-witness-script-hash）"><a href="#P2WSH（pay-to-witness-script-hash）" class="headerlink" title="P2WSH（pay-to-witness-script-hash）"></a>P2WSH（pay-to-witness-script-hash）</h2><p>witness: witness_version(0x00) OP_PUSHDATA?BYTES &lt;签名1&gt; OP_1 OP_PUSHDATA33BYTES &lt;压缩式公钥1&gt; OP_PUSHDATA33BYTES &lt;压缩式公钥2&gt; OP_2 OP_CHECKMULTISIG(0xAE)<br>解锁脚本: 空<br>锁定脚本1: witness_version(0x00) PUSHDATA32BYTES(0x20) &lt;脚本哈希&gt;(32bytes)<br>锁定脚本2: witness_version(0x00) PUSHDATA20BYTES(0x14) &lt;脚本哈希&gt;(20bytes)<br>锁定脚本3: witness_version(非0x00) PUSHDATA任意BYTES &lt;脚本哈希&gt;(任意bytes)<br>(注意：P2SH的脚本哈希只有20字节，这里可以20字节或者32字节，32字节是为了防碰撞)<br>交易举例：txid为<code>d38f496e1004895c52d35bfe392800024b78b40e30dd063c4728058088ea0620</code>交易的输入witness：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">04//？？</span><br><span class="line">witness_version(0x00)</span><br><span class="line">47</span><br><span class="line">304402203f87ea2cb39bf7b57f0ada40cfa7178a7b11548767d17be57e0e3a9ed818e53902202323afa3875a9917bf8227051ea5805ea5bc7a71f1ef8176884964a278aa2c2b01//签名</span><br><span class="line">47</span><br><span class="line">304402201055076d4a5284509a8c3e01abbe5e34e4fd79fe823914821bcaa7924333e0e40220495237c0d9acd7f16357de8c89e4eaab620ce5d26b810214e96272f4cf27b54e01//签名</span><br><span class="line">OP_VERIFY(0x69)</span><br><span class="line">OP_2(0x52)</span><br><span class="line">21</span><br><span class="line">0375e00eb72e29da82b89367947f29ef34afb75e8654f6ea368e0acdfd92976b7c//公钥</span><br><span class="line">21</span><br><span class="line">03a1b26313f430c4b15bb1fdce663207659d8cac749a0e53d70eff01874496feff//公钥</span><br><span class="line">21</span><br><span class="line">03c96d495bfdd5ba4145e3e046fee45e84a8a48ad05bd8dbb395c011a32cf9f880//公钥</span><br><span class="line">OP_3(0x53)</span><br><span class="line">ae</span><br></pre></td></tr></table></figure></p><h1 id="将P2WPKH和P2WSH的witness-program嵌入P2SH赎回脚本的部分"><a href="#将P2WPKH和P2WSH的witness-program嵌入P2SH赎回脚本的部分" class="headerlink" title="将P2WPKH和P2WSH的witness program嵌入P2SH赎回脚本的部分"></a>将P2WPKH和P2WSH的witness program嵌入P2SH赎回脚本的部分</h1><p>witness_version在解锁脚本内。</p><h2 id="P2WPKH-nested-in-BIP16-P2SH"><a href="#P2WPKH-nested-in-BIP16-P2SH" class="headerlink" title="P2WPKH nested in BIP16 P2SH"></a>P2WPKH nested in BIP16 P2SH</h2><p>witness:<br>解锁脚本: PUSHDATA22BYTES(0x16) witness_version(00)PUSHDATA22BYTES(0x14) &lt;公钥哈希&gt;(20bytes)<br>锁定脚本: OP_HASH160(0xA9) PUSHDATA20BYTES(0x14) &lt;脚本哈希&gt;(20bytes) OP_EQUAL(0x87)</p><p>举例：交易c420d6cf09973d4a539cb17acdc42a3a89a89e0d6e28938a37951085d8433125的输出</p><h2 id="P2WSH-nested-in-BIP16-P2SH"><a href="#P2WSH-nested-in-BIP16-P2SH" class="headerlink" title="P2WSH nested in BIP16 P2SH"></a>P2WSH nested in BIP16 P2SH</h2><p>witness:0 <1 2="" checkmultisig=""><br>解锁脚本1: PUSHDATA34BYTES(0x22) witness_version(00) PUSHDATA32BYTES(0x20) &lt;脚本哈希&gt; (32bytes)<br>解锁脚本2: PUSHDATA22BYTES(0x16) witness_version(00) PUSHDATA20BYTES(0x14) &lt;脚本哈希&gt; (20bytes)<br>锁定脚本: OP_HASH160(0xa9) OP_PUSHDATA20(0x14) <20-byte-hash> OP_EQUAL(0x87)</20-byte-hash></1></p><p>交易举例：<br><code>4967d6427b17a17e91b524e9a4f8a810182c5f9995fd07fe2eab71d9cc96ecc0</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自: &lt;a href=&quot;https://furrybear.github.io/%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%9A%E8%84%9A%E6%
      
    
    </summary>
    
      <category term="区块链" scheme="http://victorjiangxin.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="比特币脚本" scheme="http://victorjiangxin.github.io/tags/%E6%AF%94%E7%89%B9%E5%B8%81%E8%84%9A%E6%9C%AC/"/>
    
      <category term="隔离见证" scheme="http://victorjiangxin.github.io/tags/%E9%9A%94%E7%A6%BB%E8%A7%81%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>异步编程C#</title>
    <link href="http://victorjiangxin.github.io//%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>http://victorjiangxin.github.io//异步编程/</id>
    <published>2018-03-21T16:00:00.000Z</published>
    <updated>2018-08-15T12:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Task与Thread的区别"><a href="#Task与Thread的区别" class="headerlink" title="Task与Thread的区别"></a>Task与Thread的区别</h1><p>  Thread每次运行会创建一个新的线程，线程的创建、结束带来大量的开销。<br>  Task每次运行时，会去线程池中寻找空闲的线程，将其分配使用。  </p><h1 id="Task及awit-async"><a href="#Task及awit-async" class="headerlink" title="Task及awit/async"></a>Task及awit/async</h1><p>async/await 结构可分成三部分：<br>     （1）调用方法：该方法调用异步方法，然后在异步方法执行其任务的时候继续执行；<br>     （2）异步方法：该方法异步执行工作，然后立刻返回到调用方法；<br>     （3）await 表达式：用于异步方法内部，指出需要异步执行的任务。一个异步方法可以包含多个 await 表达式（不存在 await 表达式的话 IDE 会发出警告）。  </p><h2 id="如何看异步代码？"><a href="#如何看异步代码？" class="headerlink" title="如何看异步代码？"></a>如何看异步代码？</h2><p>async定义的函数可分为以下几部分： await之前的部分；await部分；await之后的部分。<br>当主函数运行到async函数时，先运行await之前的部分，遇到await后，线程分为两部分，（此时主线程从async函数中已经返回了）一个线程在主函数中继续运行，另一线程在继续运行await函数。PS:async函数内部的执行顺序，还是不变的，严格从上往下执行，即使有多个awit关键词，仍旧执行完前一个await语句后，再执行后一个await语句。</p><h2 id="示例代码与输出"><a href="#示例代码与输出" class="headerlink" title="示例代码与输出"></a>示例代码与输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;main thread start!&quot;);</span><br><span class="line">            Task t = TestAsync();</span><br><span class="line">            Console.WriteLine(&quot;main thread end!&quot;);</span><br><span class="line">            Console.Read();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static async Task TestAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Task start!&quot;);</span><br><span class="line">            await Task.Run(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;await0 start!&quot;);</span><br><span class="line">                for (int i = 0; i &lt; 500000; i++)</span><br><span class="line">                    ;</span><br><span class="line">                Console.WriteLine(&quot;await0 end!&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            await Task.Run(()=&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;awit1 start!&quot;);</span><br><span class="line">                for (int i = 0; i &lt; 5; i++)</span><br><span class="line">                    ;</span><br><span class="line">                Console.WriteLine(&quot;awit1 end!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main thread start!</span><br><span class="line">Task start!</span><br><span class="line">await0 start!</span><br><span class="line">main thread end!</span><br><span class="line">await0 end!</span><br><span class="line">awit1 start!</span><br><span class="line">awit1 end!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Task与Thread的区别&quot;&gt;&lt;a href=&quot;#Task与Thread的区别&quot; class=&quot;headerlink&quot; title=&quot;Task与Thread的区别&quot;&gt;&lt;/a&gt;Task与Thread的区别&lt;/h1&gt;&lt;p&gt;  Thread每次运行会创建一个新的线程，
      
    
    </summary>
    
      <category term="笔记" scheme="http://victorjiangxin.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C#" scheme="http://victorjiangxin.github.io/tags/C/"/>
    
      <category term="异步编程" scheme="http://victorjiangxin.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
